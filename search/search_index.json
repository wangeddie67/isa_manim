{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Manim for ISA","text":"<p>This project aims to create a well-using framework to generate animations presenting the function  of one instruction or an instruction sequence.</p> <p>The whole project is based on Manim, which is  a very powerful Python-based animation framework for mathematics and algorithms. Meanwhile, it is  very simple to use. Manim has been widely used in education and research. </p>"},{"location":"#installation","title":"Installation","text":"<p>The whole project is developed based on Python3. The required environment can be easily set up.</p>"},{"location":"#install-manim","title":"Install Manim","text":"<p>The process to install Manim in different OS can be found in Page Installation.</p> <p>The typical process to install Manim in Ubuntu is as below:</p> <pre><code># Install requirements of Manim\nsudo apt update\nsudo apt install build-essential python3-dev libcairo2-dev libpango1.0-dev ffmpeg\n\n# Install python package manager\nsudo apt install python3-pip\n\n# Install Manim\npip3 install manim\n</code></pre>"},{"location":"#clone-repository","title":"Clone repository","text":"<p>The project repository is stored at https://github.com/wangeddie67/isa_manim. Fellow commands  clone the project to local.</p> <pre><code># git clone repository\ngit clone git@github.com:wangeddie67/isa_manim.git\n\n# install requirements\npip3 install -r isa_manim/requirements.txt\n</code></pre>"},{"location":"#generate-documents","title":"Generate Documents","text":"<p>The document for this project is generated by MkDocs. The environment of MkDocs can be set up by  following commands:</p> <pre><code>cd /root/to/isa_sim_utils/docs\n\n# Install MkDocs and plugin\npip3 install -r requirements.txt\n</code></pre> <p>The document can be generated through Makefile.</p> <pre><code>make doc\n</code></pre> <p>The generated documents are located in the directory <code>docs/site</code>. The index page of generated documents is <code>docs/site/index.html</code>.</p>"},{"location":"0-introductions/01-scenes/","title":"ISA Scenes","text":"<p>When users want to create one animation for ISA, <code>isa_manim</code> should be imported at the start of the source file.</p> <p>Then, like Manim, one class should be created to describe the behavior within the animation. The class should choose one of <code>SingleIsaScene</code> and <code>MultiIsaScene</code> as the base class.</p> <pre><code>from isa_manim import SingleIsaScene \n\nclass TestSingleIsaScene(SingleIsaScene):\n    ...\n</code></pre> <p>Or</p> <pre><code>from isa_manim import MultiIsaScene\n\nclass TestMultiIsaScene(MultiIsaScene):\n    ...\n</code></pre> <p>The differences between <code>SingleIsaScene</code> and <code>MultiIsaScene</code> lie in the layout of scenes. </p> <p>Both <code>SingleIsaScene</code> and <code>MultiIsaScene</code> separate the scene into the title part and the zoom part. The zoom part contains objects (registers, functions and memory) and performs animations. When new objects are added to the scene or some objects are removed from the scene, the zoom part will be scaled or moved to fit all objects within the middle of the scene.</p> <p>The title part does not scale during animations. <code>SingleIsaScene</code> only provides one title in the title part. <code>MultiIsaScene</code> provides both the title and subtitle in the title part. The subtitle can be changed during animation.</p> <p><code>SingleIsaScene.draw_title</code> and <code>MultiIsaScene.draw_title</code> draw the title on the scene. <code>MultiIsaScene.draw_subtitle</code> fades in the subtitle.</p> <p>The animation class should overwrite the behavior of the function <code>construct_isa_flow</code>. In the <code>construct_isa_flow</code>, users do not need to pay much attention to the animation flow but focus on describing the behavior of instructions. Within <code>construct_isa_flow</code>, users can use the APIs provided in Animation APIs</p> <p>It is not recommand to apply objects and animations provided in <code>isa_manim.isa_object</code> and <code>isa_manim.isa_animate</code> directly.</p>"},{"location":"0-introductions/01-scenes/#isa-animation-flow-management","title":"ISA Animation Flow Management","text":"<p>IsaManim makes a major effort to hide the effort of animation flow management behind the APIs describing the behavior of instruction.</p> <p>First, IsaManim places objects (register units, function units and memory units) on the scene automatically. See Placement for details.</p> <p>Then, IsaManim schedules animations according to the dependency between animations. <code>play</code> and <code>wait</code> are hidden behind APIs. See Animation Flow for details.</p> <p>For example, for vector instructions, users have to expand the loop manually and play animations simultaneously.</p> <pre><code>opa_list = [self.read_elem(zn, e) for e in range(0, elements)]\nopb_list = [self.read_elem(zm, e) for e in range(0, elements)]\nres_list = [self.function_call(f\"binop{e}\", [opa_list[e], opb_list[e]]) for e in range(0, elements)]\nres_list = [self.move_elem(res_list[e], zd, e) for e in range(0, elements)]\n</code></pre> <p>With animation APIs provided by IsaManim, IsaManim analyzes the dependency of animations and expands the loop automatically.</p> <pre><code>for e in range(0, elements):\n    op_a = self.read_elem(zn, e)\n    op_b = self.read_elem(zm, e)\n    res = self.function_call(f\"binop{e}\", [op_a, op_b])\n    self.move_elem(res, zd, e)\n</code></pre> <p>Further, the color of each element unit is assigned from a color scheme. Element units generated at the same position in the source code share the same color. For example, <code>op_a</code>, <code>op_b</code> and <code>res</code> will be assigned different colors. But <code>op_a</code> for different <code>e</code> among the loop share the same color. Similarly, <code>op_b</code> and <code>res</code> for different <code>e</code> also share the same color. See Color Map for details.</p>"},{"location":"0-introductions/01-scenes/#manual-control","title":"Manual Control","text":"<p>Except for automatic placement and animation flow, IsaManim still provides several methods for users to control the generated animation.</p> <p>First, the option <code>align_width</code> controls to place the generated object in the same row as the specified object.</p> <p>Then, for groups of function units, <code>force_hw_ratio</code> controls the number of units within one row. Otherwise, the number of units is auto-adjusted to fit the scene.</p> <p>Further, <code>end_section()</code> is applied to control the animation flow. <code>end_section</code> performs like a barrier. Animations before the <code>end_section</code> in programming order must finished before the <code>end_section</code>. Meanwhile, Animations after the <code>end_section</code> in programming order must start after the <code>end_section</code>.</p> <p>Take the above vector instruction as an example again. The animation of the first element plays separately from animations of other elements because <code>end_section</code> is called when <code>e</code> is 0.</p> <pre><code>for e in range(0, elements):\n    op_a = self.read_elem(zn, e)\n    op_b = self.read_elem(zm, e)\n    res = self.function_call(f\"binop{e}\", [op_a, op_b])\n    self.move_elem(res, zd, e)\n\n    if e == 0:\n        self.end_section(wait=1, fade_out=False)\n</code></pre> <p><code>end_section</code> provides the following options:</p> <ul> <li><code>wait</code> specifies the duration between sections. A suitable pause can help a lot for audiences to understand the animation.</li> <li><code>fade_out</code> specifies whether all objects on the scene should be faded out. The default value is <code>True</code>.</li> </ul> <p><code>fade_out</code> does not control the title.</p> <p>the following options are only available in <code>MultiIsaScene</code>.</p> <ul> <li><code>keep_objects</code> specifies which objects and element units should be kept while other objects should be faded out. This option is very useful for one animation with several phases, like memory copy instruction.</li> <li><code>keep_pos</code> specifies whether the position of objects within <code>keep_objects</code> should be kept.</li> </ul>"},{"location":"0-introductions/01-scenes/#examples","title":"Examples","text":"<p>Source code: test_single_isa_scene_mem.py</p> <p></p> <p>Source code: test_single_isa_scene_mem.py</p> <p></p> <p>Source code: test_multi_isa_scene.py</p>"},{"location":"0-introductions/01-scenes/#isa_scene","title":"isa_scene","text":""},{"location":"0-introductions/01-scenes/#isa-scene-for-single-instruction","title":"ISA Scene for Single Instruction","text":"<p><code>isa_manim.isa_scene.single_isa_scene.SingleIsaScene</code> is used to describe one single instruction. Hence, it only provides one title, by function <code>draw_title</code>.</p> <p>The height of the frame is 9 while the width of the frame is 16.</p> <p><code>isa_manim.isa_scene.single_isa_scene.SingleIsaScene</code> applies <code>ZoomedScene</code>. The camera frame of the zoomed scene covers the area of the object placement while the display frame of the zoomed scene covers the area below the title (from 3.0 to the bottom, from the left to the right).</p> <p>             Bases: <code>ZoomedScene</code>, <code>IsaDataFlow</code></p> <p>ISA scene with single instructions.</p> <p>Attributes:</p> Name Type Description <code>camera_scale_rate</code> <code>float</code> <p>scale factor of zoomed camera.</p> <code>camera_origin</code> <code>array</code> <p>origin of zoomed camera.</p>"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.single_isa_scene.SingleIsaScene.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Construct scene.</p>"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.single_isa_scene.SingleIsaScene.construct","title":"<code>construct()</code>","text":"<p>Construct animation.</p>"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.single_isa_scene.SingleIsaScene.construct_isa_flow","title":"<code>construct_isa_flow()</code>","text":"<p>Construct ISA flow. Rewrite in inherited class.</p>"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.single_isa_scene.SingleIsaScene.draw_title","title":"<code>draw_title(title)</code>","text":"<p>Draw title.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>String of title.</p> required"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.single_isa_scene.SingleIsaScene.end_section","title":"<code>end_section(wait=1, fade_out=True)</code>","text":"<p>Terminate or temporary stop of section, and update camera.</p> <p>Parameters:</p> Name Type Description Default <code>wait</code> <code>int</code> <p>Time of wait before end of section.</p> <code>1</code> <code>fade_out</code> <code>bool</code> <p>True means fade_out all items on scene except always-on items.</p> <code>True</code>"},{"location":"0-introductions/01-scenes/#isa-scene-for-multiple-instructions","title":"ISA Scene for Multiple Instructions","text":"<p><code>isa_manim.isa_scene.multi_isa_scene.MultiIsaScene</code> performs the same behavior as above, except it provides one subtitle below the title by function <code>draw_subtitle</code>. Hence, the display frame of the zoomed scene covers the area below the subtitle (from 2.0 to the bottom, from the left to the right).</p> <p>Moreover, the function <code>start_section</code> is provided to reset the object placement, which should be placed before each instruction. As below:</p> <pre><code>def construct_isa_flow(self):\n    self.start_section(\"instruction 1\")\n    # Instruction behaviors.\n    self.end_section()\n\n    self.start_section(\"instruction 2\")\n    # Instruction behaviors.\n    self.end_section()\n</code></pre> <p>             Bases: <code>ZoomedScene</code>, <code>IsaDataFlow</code></p> <p>ISA scene with multiple instructions.</p> <p>Attributes:</p> Name Type Description <code>camera_scale_rate</code> <code>float</code> <p>scale factor of zoomed camera.</p> <code>camera_origin</code> <code>array</code> <p>origin of zoomed camera.</p>"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.multi_isa_scene.MultiIsaScene.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Construct scene.</p>"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.multi_isa_scene.MultiIsaScene.construct","title":"<code>construct()</code>","text":"<p>Construct animation.</p>"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.multi_isa_scene.MultiIsaScene.construct_isa_flow","title":"<code>construct_isa_flow()</code>","text":"<p>Construct ISA flow. Rewrite in inherited class.</p>"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.multi_isa_scene.MultiIsaScene.draw_subtitle","title":"<code>draw_subtitle(subtitle)</code>","text":"<p>Draw subtitle.</p> <p>Parameters:</p> Name Type Description Default <code>subtitle</code> <code>str</code> <p>String of subtitle.</p> required"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.multi_isa_scene.MultiIsaScene.draw_title","title":"<code>draw_title(title)</code>","text":"<p>Draw title.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>String of title.</p> required"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.multi_isa_scene.MultiIsaScene.end_section","title":"<code>end_section(wait=1, fade_out=True, keep_objects=None, keep_pos=True)</code>","text":"<p>Terminate or temporary stop of section, and update camera.</p> <p>Parameters:</p> Name Type Description Default <code>wait</code> <code>int</code> <p>Time of wait before end of section.</p> <code>1</code> <code>fade_out</code> <code>bool</code> <p>True means fade_out all items on scene except always-on items.</p> <code>True</code>"},{"location":"0-introductions/01-scenes/#isa_manim.isa_scene.multi_isa_scene.MultiIsaScene.start_section","title":"<code>start_section(subtitle)</code>","text":"<p>Start of one section. Draw subtitle and reset object placement.</p> <p>Parameters:</p> Name Type Description Default <code>subtitle</code> <code>str</code> <p>String of subtitle.</p> required"},{"location":"0-introductions/02-animation-apis/","title":"Animation APIs","text":"<p>The following APIs can be called within <code>SingleIsaScene</code> and <code>MultiIsaScene</code>.</p> <p>Please reference Animation for ISA Behaviors for the details about animation.</p> <p>Please reference Data flow for additional information about <code>isa_data_flow</code>.</p>"},{"location":"0-introductions/02-animation-apis/#apis-for-registers-and-elements","title":"APIs for Registers and Elements","text":""},{"location":"0-introductions/02-animation-apis/#decl_register","title":"decl_register","text":"<p>Declare one register with a specified name (<code>text</code>) and bit width (<code>width</code>) and add it to the scene.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Name of this register.</p> required <code>width</code> <code>int</code> <p>Width of this register width, in bit.</p> required <code>elements</code> <code>int</code> <p>Elements count in this register, or horizontal size of this register.</p> <code>1</code> <code>nreg</code> <code>int</code> <p>Number of registers, or vertical size of this register.</p> <code>1</code> <code>value</code> <code>List[List[Any]]</code> <p>Value of this register, single element or 1-D/2-D array. If not specified, assign None.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of register name. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <code>align_with</code> <code>Union[RegUnit, FunctionUnit, MemoryUnit]</code> <p>Align with specified element when placement. If not specified, placement follows automatic strategy.</p> <code>None</code> <p>Returns:</p> Type Description <code>RegUnit</code> <p>Generated register unit.</p> <p><code>decl_register</code> has three overloading methods for different shapes of registers:</p> <pre><code># Scalar register.\n@overload\ndef decl_register(self, text: str, width: int,\n                  value: Any = None, font_size: int = DEFAULT_FONT_SIZE, value_format: str = None, align_with = None) -&gt; RegUnit: ...\n\n# Vector register\n@overload\ndef decl_register(self, text: str, width: int, elements: int,\n                  value: List[Any] = None, font_size: int = DEFAULT_FONT_SIZE, value_format: str = None, align_with = None) -&gt; RegUnit: ...\n\n# Matrix register or a list of regsiters.\n@overload\ndef decl_register(self, text: str, width: int, elements: int, nreg: int,\n                  value: List[List[Any]] = None, font_size: int = DEFAULT_FONT_SIZE, value_format: str = None, align_with = None) -&gt; RegUnit: ...\n</code></pre>"},{"location":"0-introductions/02-animation-apis/#read_elem","title":"read_elem","text":"<p>Read one element from the specified position (<code>reg_idx</code> and <code>index</code>) of the specified register <code>vector</code> and return one element unit.</p> <p>Parameters:</p> Name Type Description Default <code>vector</code> <code>RegUnit</code> <p>Register.</p> required <code>index</code> <code>int</code> <p>Element index.</p> <code>0</code> <code>reg_idx</code> <code>int</code> <p>Regsiter index.</p> <code>0</code> <code>offset</code> <code>int</code> <p>Offset of LSB.</p> <code>0</code> <code>width</code> <code>int</code> <p>Width of element in bit.</p> <code>0</code> <code>color_hash</code> <code>Union[int, str]</code> <p>Hash to get color from color scheme.</p> <code>None</code> <code>value</code> <code>Any</code> <p>Value of this register, single element or 1-D/2-D array. If not specified, assign None.</p> <code>None</code> <code>fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of element value. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>ElemUnit</code> <p>Generated element unit.</p> <p><code>read_elem</code> has three overloading methods for different shapes of registers.</p> <pre><code># Scalar register.\n@overload\ndef read_elem(self,\n              vector: RegUnit, offset: int = 0, width: int = -1,\n              value = None, color_hash = None, fill_opacity: float = None, font_size: int = DEFAULT_FONT_SIZE, value_format: str = None) -&gt; ElemUnit: ...\n\n# Vector register\n@overload\ndef read_elem(self,\n              vector: RegUnit, index: int, offset: int = 0, width: int = -1,\n              value = None, color_hash = None, fill_opacity: float = None, font_size: int = DEFAULT_FONT_SIZE, value_format: str = None) -&gt; ElemUnit: ...\n\n# Matrix register or a list of regsiters.\n@overload\ndef read_elem(self,\n              vector: RegUnit, index: int, reg_idx: int, offset: int = 0, width: int = -1,\n              value = None, color_hash = None, fill_opacity: float = None, font_size: int = DEFAULT_FONT_SIZE, value_format: str = None) -&gt; ElemUnit: ...\n</code></pre>"},{"location":"0-introductions/02-animation-apis/#move_elem","title":"move_elem","text":"<p>Aassign one element <code>elem</code> to the specified position (<code>reg_idx</code> and <code>index</code>) of the specified register <code>vector</code>. </p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Element object.</p> required <code>vector</code> <code>RegUnit</code> <p>Register unit.</p> required <code>index</code> <code>int</code> <p>Element index.</p> <code>0</code> <code>reg_idx</code> <code>int</code> <p>Regsiter index.</p> <code>0</code> <code>offset</code> <code>int</code> <p>Offset of LSB.</p> <code>0</code> <code>width</code> <code>int</code> <p>Width of element in bit.</p> <code>0</code> <p>Returns:</p> Type Description <code>ElemUnit</code> <p>Element unit after move.</p> <p>If there are further animations on this element unit, must replace variables of this element unit with return value.</p> <p><code>move_elem</code> has three overloading methods for different shapes of registers.</p> <pre><code># Scalar register.\n@overload\ndef move_elem(self, elem: ElemUnit, vector: RegUnit, offset: int = 0, width: int = 0): ...\n\n# Vector register\n@overload\ndef move_elem(self, elem: ElemUnit, vector: RegUnit, index: int, offset: int = 0, width: int = 0): ...\n\n# Matrix register or a list of regsiters.\n@overload\ndef move_elem(self, elem: ElemUnit, vector: RegUnit, index: int, reg_idx: int, offset: int = 0, width: int = 0): ...\n</code></pre>"},{"location":"0-introductions/02-animation-apis/#data_extend","title":"data_extend","text":"<p>Signaled extend or zero-extend element <code>elem</code> to bitwidth `width. Return the new element after extension.</p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Origin element unit.</p> required <code>width</code> <code>float</code> <p>Target width for extend.</p> required <code>zero_extend</code> <code>bool</code> <p>True means zero extension. The extend part will be assign with zero.</p> <code>False</code> <code>value</code> <code>Any</code> <p>New value of the element unit. If not specified, inherent value from the origin element.</p> <code>None</code> <p>Returns:</p> Type Description <code>ElemUnit</code> <p>Element unit after extension.</p> <p>The <code>width</code> can be lower than the width of original element, as a narrow convert.</p> <p>If there are further animations on this element unit, must replace variables of this element unit with return value.</p>"},{"location":"0-introductions/02-animation-apis/#apis-for-function-units","title":"APIs for Function Units","text":""},{"location":"0-introductions/02-animation-apis/#decl_function","title":"decl_function","text":"<p>Declare one function unit with a specified hash (<code>isa_hash</code>), arguments (<code>arg_width</code>), and return values (<code>res_width</code>) and add it to the scene.</p> <p>Parameters:</p> Name Type Description Default <code>isa_hash</code> <code>str</code> <p>Hash value of this function unit, used by <code>function_call</code>.</p> required <code>args_width</code> <code>List[float]</code> <p>A list of bit-width of arguments.</p> required <code>res_width</code> <code>Union[int, List[int]]</code> <p>Bit-width of return values. If there is only one return value, one single interger is required.</p> required <code>name</code> <code>str</code> <p>Function name. If not specified, take <code>isa_hash</code> as function name.</p> <code>None</code> <code>args_name</code> <code>List[str]</code> <p>A list of name of arguments. The number of elements should be same as <code>args_width</code>.</p> <code>None</code> <code>res_name</code> <code>Union[str, List[str]]</code> <p>Name of return value. The number of elements should be same as <code>res_name</code>.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of register name. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <code>align_with</code> <code>Union[RegUnit, FunctionUnit, MemoryUnit]</code> <p>Align with specified element when placement. If not specified, placement follows automatic strategy.</p> <code>None</code> <code>func_callee</code> <code>Callable</code> <p>Pointer to a function to perform the functionality. </p> <code>None</code> <p>Returns:</p> Type Description <code>FunctionUnit</code> <p>Generated function unit.</p> <p>Function units are identified by hash values because some function units may share the same name. For example, one instruction applies multiple adders (<code>name</code> is \"Adder\"). If the option <code>name</code> is not provided, the generated function unit applies <code>isa_hash</code> as the name.</p> <p><code>args_width</code> and <code>args_name</code> should have the same number of elements. <code>res_width</code> and <code>res_name</code> also should have the same number of elements. If there is only one return value, <code>res_width</code> and <code>res_name</code> can be single elements. For example:</p> <pre><code># Adder without carry bit.\nself.decl_function(\"adder\", [16, 16], 16, args_name=[\"a\", \"b\"], res_name=\"sum\")\n\n# Adder with carry bit\nself.decl_function(\"adder\", [16, 16, 1], [1, 16], args_name=[\"a\", \"b\", \"cin\"], res_name=[\"cout\", \"sum\"])\n</code></pre> <p>If one instruction apply multiple heterogenous function units, apply <code>decl_function</code> to generate each function unit and apply option <code>align_with</code> to guide the layout of function units.</p> <p>If one instruction apply multiple homogenous function unit, apply <code>decl_func_group</code> as below.</p>"},{"location":"0-introductions/02-animation-apis/#decl_func_group","title":"decl_func_group","text":"<p>Declare a group of function units with a sequential of specified hash (<code>isa_hash</code>), arguments (<code>arg_width</code>), and return values (<code>res_width</code>) and add them to the scene as a group.</p> <p>Parameters:</p> Name Type Description Default <code>num_unit</code> <code>Union[int, List[int]]</code> <p>The number of units. More than one hierachy level is accepted.</p> required <code>isa_hash</code> <code>Union[str, List[str]]</code> <p>Hash value of this function unit, used by <code>function_call</code>. Both a single hash and a sequence of hash are accepted.</p> required <code>args_width</code> <code>List[float]</code> <p>A list of bit-width of arguments.</p> required <code>res_width</code> <code>Union[int, List[int]]</code> <p>Bit-width of return values. If there is only one return value, one single interger is required.</p> required <code>func_name</code> <code>Union[str, List[str]]</code> <p>Function name. If not specified, take <code>isa_hash</code> as function name.</p> <code>None</code> <code>args_name</code> <code>List[str]</code> <p>A list of name of arguments. The number of elements should be same as <code>args_width</code>.</p> <code>None</code> <code>res_name</code> <code>Union[str, List[str]]</code> <p>Name of return value. The number of elements should be same as <code>res_name</code>.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of register name. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <code>force_hw_ratio</code> <code>bool</code> <p>If <code>force_hw_ratio</code> is true, the number of units in one row is forced by the last item in <code>num_unit</code>. If <code>force_hw_ratio</code> is false, the shape of function groups is auto-adjusted according to the scene h/w ratio.</p> <code>False</code> <code>func_callee</code> <code>Callable</code> <p>Pointer to a function to perform the functionality.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[FunctionUnit]</code> <p>A list of generated function unit.</p> <p>Generated function units share the <code>args_width</code>, <code>res_width</code>, <code>args_name</code>, <code>res_name</code>, <code>font_size</code>, <code>value_format</code> and <code>func_callee</code>. <code>args_width</code> and <code>args_name</code> should have the same number of elements. <code>res_width</code> and <code>res_name</code> also should have the same number of elements. If there is only one return value, <code>res_width</code> and <code>res_name</code> can be single elements. </p> <p><code>num_unit</code> specifies the number of units. If one single integer is provided, the integer presents the number of units. If a list of integers is provided, the list presents the hierarchy of units. For example, <code>[2, 4]</code> means 2 groups of units and each group has 4 units.</p> <p>The hash value of each function unit is specified by <code>isa_hash</code>. If one single string is provided, <code>decl_func_group</code> will generate one individual hash for each element. Take <code>isa_hash</code> is \"Addr\" as an example:</p> <ul> <li>If <code>num_unit</code> is 8, the hash values are <code>Addr0</code>, <code>Addr1</code>, <code>Addr2</code>, ..., <code>Addr7</code>.</li> <li>If <code>num_unit</code> is [8, 8], the hash value are <code>Addr0_0</code>, <code>Addr0_1</code>, ..., <code>Addr_1_0</code>, <code>Addr_1_1</code>, ..., <code>Addr7_7</code></li> </ul> <p>If a list is provided to the option <code>isa_hash</code>, the list must follow the hierarchy defined by <code>num_unit</code>. So that <code>isa_hash</code> can be assigned to each function unit.</p> <p>The option <code>func_name</code> specifies names for function units. If <code>func_name</code> is not specified, take <code>isa_hash</code> as the name. If one single string is provided, all function units share the same function name. Otherwise, <code>func_name</code> should follow the hierarchy defined by <code>num_unit</code>.</p> <p>The shape of a function group is auto-adjusted if <code>force_hw_ratio</code> is False. See Objects Placement as an example.</p> <p>It is recommand to provide one single element to <code>num_unit</code>, <code>isa_hash</code> and <code>func_name</code>. <code>decl_func_group</code> will generate one individual hash for each element.</p>"},{"location":"0-introductions/02-animation-apis/#function_call","title":"function_call","text":"<p>Function call.</p> <p>Parameters:</p> Name Type Description Default <code>isa_hash</code> <code>str</code> <p>Hash value of the specified function unit.</p> required <code>args</code> <code>List[ElemUnit]</code> <p>Element units as arguments.</p> required <code>args_offset</code> <code>List[int]</code> <p>LSB offset for the argument elements. If not specified, 0 for each argument elements.</p> <code>None</code> <code>color_hash</code> <code>Union[int, str]</code> <p>Specified hash to get color from scheme.</p> <code>None</code> <code>res_width</code> <code>Union[int, List[int]]</code> <p>Bit-width of return values. If there is only one return value, one single interger is required.</p> <code>None</code> <code>res_offset</code> <code>Union[int, List[int]]</code> <p>LSB offset for the result element units. If not specified, 0 for each result element units.</p> <code>None</code> <code>res_value</code> <code>Union[Any, List[Any]]</code> <p>Value of the result element units. If not specified, assign None or calculate by inline function.</p> <code>None</code> <code>res_fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>res_font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>res_value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ElemUnit, List[ElemUnit]]</code> <p>Result element units. If only one result value, only one element unit returns.</p> <p>To reduce the coding complexity, <code>function_call</code> provides the capacity to perform the functionality. If one callable function has been provided to the function unit through option <code>func_callee</code> and all the argument element units have assigned value (<code>elem_value</code>), <code>function_call</code> performs the functionality by calling <code>func_callee</code> with value from all <code>args</code>. An example is as below:</p> <pre><code>mbytes = 4\n\n# Registers\nrn_reg = self.decl_register(\"rn\", addrlen, value=0x100)\nrm_reg = self.decl_register(\"rm\", addrlen, value=0x100, align_with=rn_reg)\n\n# Function unit\nself.decl_function(\"addrgen\", [addrlen, addrlen], addrlen,\n                    name=\"base+offset\", args_name=[\"base\", \"offset\"],\n                    func_callee=lambda x, y: x + y)\nself.decl_function(\"scale\", [addrlen], addrlen,\n                    name=f\"offset*{mbytes}\", args_name=[\"offset\"],\n                    func_callee=lambda x: x * mbytes)\n\n# Behaviors\nbase = self.read_elem(rn_reg)\n# element value of `base` is 0x100\noffset = self.read_elem(rm_reg)\n# element value of `offset` is 0x100\noffset = self.function_call(\"scale\", [offset])\n# element value of `offset` is 0x100 * 4 = 0x400\nbase = self.function_call(\"addrgen\", [base, offset])\n# element value of `base` is 0x100 + 0x400 = 0x500\n</code></pre> <p>In some situations, argument element units and result element units may not cover all bits as the bit-width of arguments and results. For example, some multiply instructions only return the high-half of the product. For such situations, <code>args_offset</code> and <code>res_offset</code> specify the LSB offset of element units. An example is as below:</p> <pre><code># Registers\nrn_reg = self.decl_register(\"rn\", 32)\nrm_reg = self.decl_register(\"rm\", 32, align_with=rn_reg)\n\n# Function unit\nself.decl_function(\"multiply\", [32, 32], 64)\n\n# Behaviors\nrn = self.read_elem(rn_reg)\nrm = self.read_elem(rm_reg)\nresult = self.function_call(\"multiply\", [rn, rm], res_width=32, res_offset=32)\n</code></pre>"},{"location":"0-introductions/02-animation-apis/#read_func_imm","title":"read_func_imm","text":"<p>Generate immediate operand for function calling.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>float</code> <p>Bit width.</p> required <code>color_hash</code> <code>Union[int, str]</code> <p>Specified hash to get color from scheme.</p> <code>None</code> <code>value</code> <code>Any</code> <p>Value of the immediate element units. If not specified, assign None or calculate by inline function.</p> <code>None</code> <code>fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>. </p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[ElemUnit, Animation]</code> <p>A tuple of element unit and fade-in animation.</p> <p>The function of <code>read_func_imm</code> does not register animation directly. Instead, the tuple of element unit and fade-in animation is delivered to <code>funcion_call</code>, so that the fade-in animation will be integrated into the animation of <code>function_call</code>.</p> <p>During the first step of the animation to call a function, the immediate operands fade in at the position of function arguments while other operands move to the position of function arguments.</p> <p>If directly deliver the return value of <code>read_func_imm</code> to the argument of <code>function_call</code>, it is not necessary to unpack the return value of <code>read_func_imm</code>.</p> <p>It is recommand that only deliver the return value of <code>read_func_imm</code> to the argument of <code>function_call</code>.</p>"},{"location":"0-introductions/02-animation-apis/#apis-for-memory-units","title":"APIs for Memory Units","text":""},{"location":"0-introductions/02-animation-apis/#decl_memory","title":"decl_memory","text":"<p>Declare one memory unit with a specified address width (<code>addr_width</code>), data width (<code>data_width</code>), and memory range (<code>mem_range</code>) and add it to the scene.</p> <p>Parameters:</p> Name Type Description Default <code>addr_width</code> <code>int</code> <p>Bit-width of the address port.</p> required <code>data_width</code> <code>int</code> <p>Bit-width of the data port.</p> required <code>mem_range</code> <code>List[Tuple[int, int]]</code> <p>Range of memory map. Each tuple in <code>mem_range</code> presents the range of one memory map. The first element in tuple is the lowest address and the second element is the highest address.</p> required <code>isa_hash</code> <code>str</code> <p>Hash value of this memory unit. Used to declare more than one memory unit.</p> <code>None</code> <code>addr_align</code> <code>int</code> <p>Align requirement of memory range. If not specified, take the value from global configuration <code>mem_align</code>.</p> <code>None</code> <code>status_width</code> <code>int</code> <p>Bit width of the status port. If not specified, the memory unit does not have status port.</p> <code>0</code> <code>font_size</code> <code>int</code> <p>Font size of register name. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <code>para_enable</code> <code>bool</code> <p>True means memory unit allow parallel animations. False means animations with this memory unit must be serialized.</p> <code>False</code> <p>Returns:</p> Type Description <code>MemoryUnit</code> <p>Generated memory unit.</p> <p>In most situations, there is only one memory unit in the animation. The hash of this memory unit is <code>Memory</code>. Users can still declare more than one memory unit by the option <code>isa_hash</code>.</p>"},{"location":"0-introductions/02-animation-apis/#read_memory","title":"read_memory","text":"<p>Read data from the specified address.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>ElemUnit</code> <p>Address element unit.</p> required <code>width</code> <code>int</code> <p>Bit width of read data.</p> required <code>offset</code> <code>int</code> <p>LSB offset of read data.</p> <code>0</code> <code>color_hash</code> <code>Union[int, str]</code> <p>Hash value to get color from color scheme.</p> <code>None</code> <code>res_value</code> <code>Any</code> <p>Value of data element.</p> <code>None</code> <code>res_fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>res_font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>res_value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>. </p> <code>None</code> <code>has_status_output</code> <code>bool</code> <p>True means output of the status port is required. If the memory unit does not have a status port, <code>has_status_output</code> is ignored.</p> <code>True</code> <code>status_width</code> <code>int</code> <p>Bit width of output status. If not specified, the width of the generated status element unit is as same as the status port.</p> <code>None</code> <code>status_value</code> <code>Any</code> <p>Value of status element.</p> <code>None</code> <code>status_fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>status_font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>status_value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>. </p> <code>None</code> <code>mem_isa_hash</code> <code>str</code> <p>Hash to idenify memory unit. If not specified, operate on the memory unit with the hash of \"Memory\".</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Tuple[ElemUnit, ElemUnit], ElemUnit]</code> <p>If having status output, return a tuple of the data and status element units. Otherwise, return the data element unit.</p>"},{"location":"0-introductions/02-animation-apis/#write_memory","title":"write_memory","text":"<p>Write data to the specified address.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>ElemUnit</code> <p>Address element unit.</p> required <code>data</code> <code>ElemUnit</code> <p>Data element unit.</p> required <code>offset</code> <code>int</code> <p>LSB offset of read data.</p> <code>0</code> <code>color_hash</code> <code>Union[int, str]</code> <p>Hash value to get color from color scheme.</p> <code>None</code> <code>has_status_output</code> <code>bool</code> <p>True means output of the status port is required. If the memory unit does not have a status port, <code>has_status_output</code> is ignored.</p> <code>True</code> <code>status_width</code> <code>int</code> <p>Bit width of output status. If not specified, the width of the generated status element unit is as same as the status port.</p> <code>None</code> <code>status_value</code> <code>Any</code> <p>Value of status element.</p> <code>None</code> <code>status_fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>status_font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>status_value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>. </p> <code>None</code> <code>mem_isa_hash</code> <code>str</code> <p>Hash to idenify memory unit. If not specified, operate on the memory unit with the hash of \"Memory\".</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ElemUnit, None]</code> <p>If having status output, return status element unit. Otherwise, return None.</p> <p>The option <code>has_status_output</code> determines whether <code>read_memory</code> and <code>write_memory</code> generate status output. If the memory unit does not have a status port, option <code>has_status_output</code> is ignored. When the memory unit has a status port:</p> <ul> <li>If <code>has_status_output</code> is False, <code>read_memory</code> and <code>write_memory</code> do not generate the status output.</li> <li><code>read_memory</code> returns the data element unit. <code>write_memory</code> returns None.</li> <li>If <code>has_status_output</code> is True, <code>read_memory</code> and <code>write_memory</code> generate the status output.</li> <li><code>read_memory</code> returns the tuple of the data and status element unit. <code>write_memory</code> returns the status element unit.</li> </ul> <p>The attributes of the generated data element unit are specified by <code>res_value</code>, <code>res_fill_opacity</code>, <code>res_font_size</code> and <code>res_value_format</code>. The attributes of the status element unit are specified by another group of options, i.e. <code>status_width</code>, <code>status_value</code>, <code>status_fill_opacity</code>, <code>status_font_size</code> and <code>status_value_format</code>.</p> <p>By default, <code>read_memory</code> and <code>write_memory</code> operate on the memory unit with the hash of \"Memory\". Still, users can specify a specified memory unit by the option of <code>mem_isa_hash</code>.</p>"},{"location":"0-introductions/03-animation-flow/","title":"Animation Flow","text":"<p>As explained in previous pages, the animation flow algorithm and function interfaces are hidden behind the APIs provided by scenes. However, users still need to understand the animation flow algorithm so that users can apply APIs at the appropriate time.</p> <p>In the original Manim, animations are ordered by the order to apply <code>play()</code>. However, when describing instructions with parallel behaviors, not only vector instructions but also some scalar instructions, it will be not convenient to manage the order of animations by hand.</p> <p>The animation flow algorithm takes the responsibility for ordering the animations according to their dependencies. When all the dependency is released, one animation can play. There are two ways to build up dependencies between animations:</p> <p>One kind of dependency is referenced as consumer-producer dependency. Animations always consume some objects and generate new objects. If any consumed object of one animation (A) is the produced object of another element (B), it is defined that the first animation (A) depends on the second animation (B). The first animation (A) must play after the second animation (B). Consumer objects include not only the source objects but also background objects. For example, the consumer objects of animation to call a function include both source elements and the function unit.</p> <p>The other kind of dependency is called serialization dependency. For function units and memory units, it is limited that only one animation related to such units can play once. </p> <p>The animations are organized into two levels:</p> <ul> <li>Animation sections consist of a sequence of animations. The splitter between sections is signed by <code>end_section()</code>. The animations after <code>end_section()</code> cannot play before <code>end_section()</code>. Similarly, the animation before <code>end_section()</code> cannot play after <code>end_section()</code> either.</li> <li>Animation steps consist of animations that can play parallelly. For example, the same animation on vector elements. Animations within one step do not have dependencies with each other. The animation flow algorithm analyzes the dependencies between animations and collects animations without dependencies into one step.</li> </ul> <p>Moreover, several additional steps are added in the section:</p> <ul> <li>At the first step of one section, the camera is moved or scaled if necessary.</li> <li>At the last step of one section, <code>wait()</code> is applied to keep the animation for users to better understand.</li> <li>After the last step of one section, items on the scene are removed unless:</li> <li>if <code>fade_out</code> is False, no item is removed.</li> <li>if <code>keep_object</code> is not empty, specified items are kept on the scene.</li> </ul> <p>Please reference Reference/Scene/Animation Flow for implementation.</p>"},{"location":"0-introductions/03-animation-flow/#color-scheme","title":"Color Scheme","text":"<p>The color of objects in ISA scenes can be allocated automatically by color scheme. Each new item  will be assigned a color in the color scheme. </p> <p>:py:class:<code>isa_manim.isa_scene.isa_color_map.IsaColorMap</code> provides the functionality to manage object color. The default color and the color scheme can all be changed by the constructor function.</p> <p>The color of objects can be controlled by a hash. The objects with the same hash value share the  same color.</p>"},{"location":"0-introductions/03-animation-flow/#advanced-schedule-features","title":"Advanced schedule features","text":"<p>To generate richer and clearer animations, animation flow scheduling also provides the following features:</p> <ul> <li>Reuse elements from the same index of the same register. When reading one element from one register, the accessed element is recorded. If the element is accessed again, the recorded element is used, rather than creating a new element.</li> <li>Duplicate elements with multiple consumers. If one element has multiple consumers, the first consumer references the original element unit, while other consumers reference the copy of this element unit.</li> </ul> <p>Please reference Reference/Scene/Reference Counter for implementation.</p>"},{"location":"0-introductions/03-animation-flow/#tips-to-control-the-animation-flow","title":"Tips to Control the Animation Flow","text":"<p>In general, it is not necessary to call extra functions to control the animation flow. In some situations, more guidance can achieve a better experience.</p> <ul> <li><code>end_section()</code> can perform as a barrier to split animations into several sections and stop animations to execute parallelly. For example, <code>end_section()</code> is appropriate if you want animations about one vector element to play separately as a highlight from other vector elements.<ul> <li><code>fade_out=False</code> keeps all objects on the scene.</li> </ul> </li> <li>The combination of <code>fade_out</code> and <code>keep_objects</code> can perform fine-grained control to keep some objects over sections. If <code>fade_out</code> is True, all objects are removed except those specified by <code>keep_objects</code>.</li> </ul>"},{"location":"0-introductions/04-placement/","title":"Object Placement","text":"<p>As explained in previous pages, the object placement algorithm and function interfaces are hidden behind the APIs provided by scenes. However, it would be useful to understand the placement algorithm so that users can use options in API to guide the final placement.</p> <p>ISA objects are placed into the placement according to a specified algorithm. <code>isa_manim.isa_scene.isa_placement.IsaPlacementMap</code> provides the implementation and function interfaces. <code>IsaPlacementMap</code> provides two major functions:</p> <ul> <li>Object dictionary for all registers, function units and memory units within the animation.</li> <li>Placement objects into a scalable scene.</li> </ul> <p>By default, the area of the placement is defined by <code>config.frame_height</code> and <code>config.frame_width</code>. The upper-left corner of the placement is the origin point of the frame. As the increasing of objects, the range of placement is scaled, but the ratio of height and width is fixed.</p> <p>The placement algorithm must address the following limitations:</p> <ul> <li>There is a margin of 1.0 around each object in all directions.</li> <li>There is a margin of 1.0 between each object and the boundary of the placement.</li> <li>The ratio of height and width of the placement is kept as the h/v ratio of the frame.</li> <li>In one row, only the same kind of object can be allocated.</li> <li>For example, function units can be placed vertically aligned, but function units cannot be placed in the same row with registers.</li> </ul>"},{"location":"0-introductions/04-placement/#placement-map","title":"Placement Map","text":"<p>The area of the placement is abstracted as a grid, each metric in the grid presents 1.0 in the vertical or horizontal direction. Objects are abstracted as rectangles with integer width and height as well. For example, if the width of one object is 3.2 and the height of one object is 4.6, that object will occupy one rectangle of 4 in horizontal and 5 in vertical. </p> <p>The status of one 1.0x1.0 square in the grid is present by one integer:</p> <ul> <li>0 means the item is free to allocate;</li> <li>1 means the item is a margin between objects or a margin between objects and items.</li> <li>2 means the item is occupied by a register.</li> <li>3 means the item is occupied by a function unit.</li> <li>4 means the item is occupied by a memory unit.</li> </ul> <p>The status of all squares construct an array, referenced as a placement map:</p> <pre><code>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0\n ----------- ----------- ----------- ----------- ----------- ----------- ----------- -----------\n1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1 0 0\n1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1 0 0\n1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1 0 0\n1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1 0 0\n1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1|2 2 2 2 2|1 0 0\n ----------- ----------- ----------- ----------- ----------- ----------- ----------- -----------\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0\n ------------------- ------------------- ------------------- -------------------\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n ------------------- ------------------- ------------------- -------------------\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0\n ------------------- ------------------- ------------------- -------------------\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1|3 3 3 3 3 3 3 3 3|1 0 0 0 0 0 0 0 0 0 0\n ------------------- ------------------- ------------------- -------------------\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n ---------------------------------------------------------------------------------------------------\n1|4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4|1\n1|4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4|1\n1|4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4|1\n1|4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4|1\n1|4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4|1\n1|4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4|1\n ---------------------------------------------------------------------------------------------------\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n</code></pre>"},{"location":"0-introductions/04-placement/#place-one-single-object","title":"Place one Single Object","text":"<p>The placement algorithm became one question to find one rectangle space in the placement  array, which addresses all the following conditions:</p> <ul> <li>The candidate rectangle space is free to allocate (all squares are 0) and it is large enough for the object to be placed.</li> <li>Squares around the candidate rectangle have not been allocated by another object (all squares are 0 or 1). So that there will be at least a margin of 1.0 between the new object and existing objects.</li> <li>All items on the same row with the candidate rectangle should be free (0), margin (1) or the same type of the new object to be placed.</li> </ul> <p>By default, the placement algorithm searches the candidate space among the placement map by \"RB\" or \"BR\" strategy. The \"RB\" strategy means attempting to place the new object beside existing items first. The \"BR\" strategy means attempting to place the new object below existing items first. The default strategy is \"RB\".</p> <p>The initialize size of the placement map is determined by <code>config.frame_width</code> and <code>config.frame_height</code>. As the increase of objects, the initialized size is not enough in most situations. When there is no space for one new object, the placement map is extended before another try. The extension does not change the ratio of horizontal and vertical. For example, if the initialized height is 9 and the initialized width is 16, the step to extend the placement map would be:</p> <p>(16,9) -&gt; (17,10) -&gt; (18,11) -&gt; (19,11) -&gt; (20,12) ...</p> <p>Besides the \"RB\" or \"BR\" strategies, <code>align_with</code> is another way to guide the placement algorithm. When <code>align_with</code> is specified, the new object is placed in the same row as the specified <code>align_with</code>. If there is not enough space for the new object, the placement map is extended.</p> <p>The specified object by <code>align_with</code> must be the same type as the new object. Otherwise, the program will fill in dead-loop.</p> <p></p> <p>Source code: test_isa_placement_map.py</p> <p>As shown in the below figure, Zm is placed aligned with Zn.</p>"},{"location":"0-introductions/04-placement/#place-a-group-of-objects","title":"Place a Group of Objects","text":"<p>For vector instructions, the animation needs a group of function units so that vector elements can be handled parallelly. In consideration of good-looking, these function units are placed into the placement map as a group. Then, each function unit is placed into the placement map within the space of the group. A group of objects cannot be aligned with any other objects.</p> <p>The space occupied by a group of objects depends on the number of objects in one row. The number is auto-adjusted according to the ratio of horizontal and vertical of the placement map. The h/v ratio of the group of objects should not be smaller than the h/v ratio of the placement map.</p> <p>As shown in the below example. The h/v ratio of the group is 16/9=1.778. The h/v ratio of \"+(a,b)\" function units is 39/11=3.545, which is larger than 1.778. If there are only 2 function units in one row, the h/v ratio of \"+(a,b)\" function units is 19/23=0.826, which is smaller than 1.778.</p> <p></p> <p>Source code: test_isa_placement_map_2.py</p> <p>Instead of the auto-adjust shape, the option <code>force_hv_ratio</code> forces all function units in one single row. As the \"*(a,b)\" function units in the above figure.</p> <p>Please reference to Reference/Scene/Object Placement for implementation.</p>"},{"location":"0-introductions/04-placement/#keep-objects-between-section","title":"Keep Objects between Section","text":"<p>For animations with multiple sections, some objects should be kept in the scene between sections. The option <code>keep_objects</code> specifies a list of objects to be kept.</p> <p>During the process, all objects are removed and the placement map is reset to the initialized size. Then, the objects specified by <code>keep_objects</code> are added back with the same hash value. If option <code>keep_pos</code> is 1, these objects are added at the same position in the previous section. Otherwise, the positions of these objects are recalculated.</p>"},{"location":"1-references/","title":"File Layout","text":"<ul> <li>isa_manim: Root path of repository.<ul> <li>docs: Directory of the document.</li> <li>isa_manim: Root path of source codes.<ul> <li>isa_animate: Per-defined animations.</li> <li>isa_objects: Objects in animations.</li> <li>isa_scene: Controls of animations.</li> </ul> </li> <li>tests: Test codes</li> </ul> </li> </ul>"},{"location":"1-references/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Objects<ul> <li>Register Unit</li> <li>Function Unit</li> <li>Memory Unit</li> <li>Element Unit</li> </ul> </li> <li>Animations<ul> <li>Animation for Registers and Elements</li> <li>Animation for Functions</li> <li>Animation for Memory</li> </ul> </li> <li>Scene<ul> <li>Color map</li> <li>Placement</li> <li>Animation flow</li> <li>Reference counter</li> </ul> </li> </ul>"},{"location":"1-references/10-objects/","title":"Objects for ISA Animation","text":"<p>isa_manim provides several graphic objects that appear in ISA frequently. These objects can be used in animate as objects provided by Manim.</p> <ul> <li><code>isa_manim.isa_objects.reg_unit.RegUnit</code> presents registers in ISA. This object can be used for general-purpose registers, vector registers, and matrix registers.</li> <li><code>isa_manim.isa_objects.func_unit.FunctionUnit</code> presents function units in ISA. This object provides the name of the function unit, as well as input arguments and output results.</li> <li><code>isa_manim.isa_objects.mem_unit.MemoryUnit</code> presents the memory unit in ISA. This object also presents a range of memory access.</li> <li><code>isa_manim.isa_objects.elem_unit.ElemUnit</code> presents data elements in ISA. This object can be used to present data read from/written to registers and memory.</li> </ul> <p>Each object consists of a series of MObject (Text, Rectangle, Eclipse or Arrow) packed into one VGroup. The definition of objects provides the constructor function to create one object. Objects also provide functions to return some positions in the object to control animations. For example, the position of a specified element in one vector, or the position of one source/destination operand in one function unit.</p> <p>Register units and element units can also maintain values. Values can be any type: integer, floating-point, and string. If values exist, element units show values while register units do not show any value. The output format of values can be controlled by the global configuration option <code>elem_value_format</code> and the option <code>value_format</code> in the constructor function. One string following the format string of Python is necessary.</p> <p>Function units can also maintain one pointer to a Python function. If element units as source operands provide valid values, one function unit can perform functionality and return a valid value.</p> <p>It is not suggested to directly create and operate the above objects in user's codes. Instead, please use APIs provided in ISA scenes.</p>"},{"location":"1-references/10-objects/11-register-unit/","title":"Register Unit","text":"<p><code>isa_manim.isa_objects.reg_unit</code> presents one single register or a group of registers. It can be used for general-purpose registers, vector registers and matrix registers.</p> <p>One example of a single register is as below:</p> <p></p> <p>Source code: test_one_dim_reg.py</p> <p>One example of a list of registers is as below:</p> <p></p> <p>Source code: test_two_dim_reg.py</p> <p>As shown in the above figures, one register unit contains the following Manim objects: - <code>reg_rect</code> presents the register.   - The width of <code>reg_rect</code> presents the bit width of the register.   - The height of <code>reg_rect</code> presents the number of registers or the row count of one matrix register. If there is only one register, the height is 1.0.  - <code>label_text_list</code> contains the labels that present the name of the register. The vertical distance between the position of labels is 1.0. The right boundary of labels is close to the left boundary of <code>reg_rect</code>.</p> <p>As the green dot shown in the above figures, the origin point of one register unit is located in the center position of the first row in <code>reg_rect</code>, which is different from the geometry center position of this object. It is suggested to use function <code>shift</code> rather than function <code>move_to</code> to change the location of the register.</p> <p>Function <code>get_elem_center</code> returns the position of one specified element. The bit width of the specified element can be different from the element bit width of the vector. </p> <p>Register units can maintain values of the register in the format of one single value (for GPRs), a 1-D array of values (for vector registers) or a 2-D array of values (for matrix registers). Function <code>get_elem_value</code> returns the value of one specified element, while function <code>set_elem_value</code> modifies the value of one specified element.</p> <p>Thus, arguments for all methods are designed to support matrix registers. If creating or operating on vector registers, <code>nreg</code> must be 1 in the constructor function and <code>reg_idx</code> is ignored in other methods. If creating or operating on general-purpose registers, <code>elements</code> must be 1 in the constructor function and <code>index</code> is ignored in other methods.</p>"},{"location":"1-references/10-objects/11-register-unit/#regunit","title":"RegUnit","text":"<p>             Bases: <code>VGroup</code></p> <p>Object for one register.</p> <p>Attributes:</p> Name Type Description <code>name_text_list</code> <code>List[Text]</code> <p>List of label text objects.</p> <code>reg_rect</code> <code>Rectangle</code> <p>List of register rectangle objects.</p> <code>reg_name_list</code> <code>List[str]</code> <p>List of register names.</p> <code>reg_color</code> <code>Color</code> <p>Color of register rectangle and labels.</p> <code>reg_font_size</code> <code>int</code> <p>Font size of register labels.</p> <code>reg_value_format</code> <code>str</code> <p>Format string for output values. Inherented by element units.</p> <code>reg_value</code> <code>Union[Any, List[Any], List[List[Any]], None]</code> <p>Register value. Inherented by element units.</p> <code>reg_width</code> <code>int</code> <p>Bit width of register.</p> <code>reg_count</code> <code>int</code> <p>Number of registers, or row count of matrix registers.</p> <code>elem_count</code> <code>int</code> <p>Number of elements.</p> <code>elem_width</code> <code>int</code> <p>Bit width of elements.</p>"},{"location":"1-references/10-objects/11-register-unit/#isa_manim.isa_objects.reg_unit.RegUnit.require_serialization","title":"<code>require_serialization = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Animation related with this object does not need to be serialized.</p>"},{"location":"1-references/10-objects/11-register-unit/#isa_manim.isa_objects.reg_unit.RegUnit.__init__","title":"<code>__init__(name_list, color, width, elements, nreg, value, font_size, value_format)</code>","text":"<p>Constructor a register.</p> <ul> <li>When construct a scalar register, <code>elements</code> is 1 and <code>nreg</code> is 1.</li> <li>When construct a vector register, <code>elements</code> is the number of elements, and <code>nreg</code> is 1.</li> <li>When construct a matrix register or a list of registers, <code>elements</code> is the number of   elements and <code>nreg</code> is the number of registers or the row count of matrix registers.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>name_list</code> <code>List[str]</code> <p>Register names which could be a string or a list of string.</p> required <code>color</code> <code>Color</code> <p>Color of register and label.</p> required <code>width</code> <code>int</code> <p>Width of register, in bits.</p> required <code>elements</code> <code>int</code> <p>Number of elements in one register.</p> required <code>nreg</code> <code>int</code> <p>Number of registers, used to create matrix registers or a list of registers.</p> required <code>value</code> <code>Union[Any, List[Any], List[List[Any]], None]</code> <p>Value of this element. None is provided if not necessary.</p> required <code>font_size</code> <code>int</code> <p>Font size of label.</p> required <code>value_format</code> <code>str</code> <p>Format string for output values. Inherented by element units.</p> required"},{"location":"1-references/10-objects/11-register-unit/#isa_manim.isa_objects.reg_unit.RegUnit.get_elem_pos","title":"<code>get_elem_pos(index, reg_idx, offset, elem_width)</code>","text":"<p>Return the center position of one specified element.</p> <p>The element is specified by <code>index</code> and <code>reg_idx</code>. In general, <code>index</code> and <code>reg_idx</code> should within the scope of the register. If <code>index</code> or <code>reg_idx</code> beyond the scope of the register, this function returns one element specified as below:</p> <ul> <li>The actual index to access element is <code>index % elem_count</code></li> <li>The actual row index to access element is <code>(reg_idx + index // elem_count) % reg_count</code>. </li> </ul> <p>The width to index elements is determined by the construtor function. However, it is not possible to operate on only a part of the element. For example, one 128 bit vector has eight 16-bit elements.</p> <ul> <li>The 4-th element [79:64] is accessed if <code>index</code> is 4, <code>offset</code> is 0 and   <code>elem_width</code> is 16.</li> <li>Lower half of the 4-th element [71:64] is accessed if <code>index</code> is 4, <code>offset</code> is 0 and   <code>elem_width</code> is 8.</li> <li>Higher half of the 4-th element [79:72] is accessed if <code>index</code> is 4, <code>offset</code> is 8 and   <code>elem_width</code> is 8.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Index of elements.</p> required <code>reg_idx</code> <code>int</code> <p>Index of register.</p> required <code>offset</code> <code>int</code> <p>Offset of lower bits.</p> required <code>elem_width</code> <code>int</code> <p>Width of element in bits.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Position of the specified element.</p>"},{"location":"1-references/10-objects/11-register-unit/#isa_manim.isa_objects.reg_unit.RegUnit.get_elem_value","title":"<code>get_elem_value(index, reg_idx)</code>","text":"<p>Return the value of one specified element. Return None if the value of this register is not specified in the constructor function.</p> <ul> <li>Return <code>self.elem_value</code> for scalar registers.</li> <li>Return <code>self.elem_value[index]</code> for vector registers.</li> <li>Return <code>self.elem_value[reg_idx][index]</code> for a list of registers or matrix registers.</li> </ul> <p>The element is specified by <code>index</code> and <code>reg_idx</code>. In general, <code>index</code> and <code>reg_idx</code> should within the scope of the register. If <code>index</code> or <code>reg_idx</code> beyond the scope of the register, this function returns one element specified as below:</p> <ul> <li>The actual index to access element is <code>index % elem_count</code></li> <li>The actual row index to access element is <code>(reg_idx + index // elem_count) % reg_count</code>. </li> </ul> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Index of elements.</p> required <code>reg_idx</code> <code>int</code> <p>Index of register.</p> required <p>Returns:</p> Type Description <code>Union[Any, List[Any], List[List[Any]], None]</code> <p>Value of the specified element.</p>"},{"location":"1-references/10-objects/11-register-unit/#isa_manim.isa_objects.reg_unit.RegUnit.get_placement_height","title":"<code>get_placement_height()</code>","text":"<p>Return the height of this object for placement. The height is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The height of this object.</p>"},{"location":"1-references/10-objects/11-register-unit/#isa_manim.isa_objects.reg_unit.RegUnit.get_placement_mark","title":"<code>get_placement_mark()</code>","text":"<p>Return the marker of this object for placement, which is 2.</p> <p>Returns:</p> Type Description <code>int</code> <p>Marker of this object.</p>"},{"location":"1-references/10-objects/11-register-unit/#isa_manim.isa_objects.reg_unit.RegUnit.get_placement_width","title":"<code>get_placement_width()</code>","text":"<p>Return the width of this object for placement. The width is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The width of this object.</p>"},{"location":"1-references/10-objects/11-register-unit/#isa_manim.isa_objects.reg_unit.RegUnit.set_elem_value","title":"<code>set_elem_value(value, index, reg_idx)</code>","text":"<p>Modify the value of one specified element.</p> <ul> <li>Modify <code>self.elem_value</code> for scalar registers.</li> <li>Modify <code>self.elem_value[index]</code> for vector registers.</li> <li>Modify <code>self.elem_value[reg_idx][index]</code> for a list of registers or matrix registers.</li> </ul> <p>The element is specified by <code>index</code> and <code>reg_idx</code>. In general, <code>index</code> and <code>reg_idx</code> should within the scope of the register. If <code>index</code> or <code>reg_idx</code> beyond the scope of the register, this function returns one element specified as below:</p> <ul> <li>The actual index to access element is <code>index % elem_count</code></li> <li>The actual row index to access element is <code>(reg_idx + index // elem_count) % reg_count</code>. </li> </ul> <p>If the value of this register is not specified in the constructor function (<code>self.elem_value</code> is None), and this register is one vector register, matrix register, or a group of registers, one 1-D/2-D array of values is created with None elements.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Index of elements.</p> required <code>reg_idx</code> <code>int</code> <p>Index of register.</p> required <code>value</code> <code>Any</code> <p>Value of this element.</p> required"},{"location":"1-references/10-objects/11-register-unit/#isa_manim.isa_objects.reg_unit.RegUnit.set_placement_corner","title":"<code>set_placement_corner(row, col)</code>","text":"<p>Set the position of object by the left-up corner position. Move object to the specified position.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>Vertical ordinate of left-up corner.</p> required <code>col</code> <code>int</code> <p>Horizontal ordinate of left-up corner.</p> required"},{"location":"1-references/10-objects/12-function-unit/","title":"Function Unit","text":"<p><code>isa_manim.isa_objects.func_unit</code> presents one function unit in ISA flow. This object can be used to present one operator (like +/-), or one predefined function (like max/min).</p> <p>This object provides the name of the function, as well as input arguments and output results. One function unit can have as many input arguments and output results as necessary.</p> <p></p> <p>Source code: test_func_unit.py</p> <p>As shown in the above figure, one function unit contains the following Manim objects: - <code>func_rect</code> presents the function unit,   - The width of <code>func_rect</code> should cover all source and destination operands. - <code>name_text</code> presents the name of the function unit, which is centrally aligned with <code>func_rect</code>. - <code>args_rect_list</code> and <code>res_rect_list</code> present the group of source operands and the group of destination operands.   - Each operand is presented by one dot rectangle.   - The width of each rectangle in <code>args_rect_list</code> and <code>res_rect_list</code> presents the bit width of the corresponding operand. - <code>args_text_list</code> and <code>res_text_list</code> present the group of names of source operands and the group of names of destination operands.   - One Text item in <code>args_text_list</code> and <code>res_rect_list</code> is horizontally aligned with the corresponding rectangle in <code>args_rect_list</code> or <code>res_rect_list</code>, and just vertically below the corresponding rectangle.</p> <p>The height of <code>func_rect</code>, <code>args_rect_list</code>, <code>res_rect_list</code> is 1.0. Then, a gap of 1.0 is added between these Manim objects in veritial. So the total height of one function unit is 5.0. </p> <p>The origin point is located in the center position of <code>func_ellipse</code>. The function unit is symmetrical about the center of the origin.</p> <p>Function <code>get_arg_pos</code> and <code>get_res_pos</code> return the position of one specified source and destination operand separately. The bit width of the specified element can be different from the bit width of the operand.</p> <p>The function unit maintains one pointer to function in <code>func_callee</code>. The assigned function can be one complete function or an inline function (lambda function). When performing function calling animations, the assigned function can operate on the value from element units of source operands, and return the output value. Member functions cannot be assigned to <code>func_callee</code> because positional operation <code>self</code> cannot be passed to <code>func_callee</code>.</p>"},{"location":"1-references/10-objects/12-function-unit/#functionunit","title":"FunctionUnit","text":"<p>             Bases: <code>VGroup</code></p> <p>Object for one function unit.</p> <p>Attributes:</p> Name Type Description <code>func_rect</code> <code>RoundedRectangle</code> <p>Round rectangle of function unit.</p> <code>name_text</code> <code>Text</code> <p>Text of name of function unit locating at the center of <code>func_rect</code>.</p> <code>args_rect_list</code> <code>List[Rectangle]</code> <p>List of rectangle of source operands.</p> <code>args_text_list</code> <code>List[Text]</code> <p>List of text of name of source operands.</p> <code>res_rect_list</code> <code>List[Rectangle]</code> <p>List of rectangle of destination operands.</p> <code>res_text_list</code> <code>List[Text]</code> <p>List of text of name of destination operands.</p> <code>func_name</code> <code>str</code> <p>Function name.</p> <code>func_color</code> <code>Color</code> <p>Color of function rectangle, operand rectangles and operand name label.</p> <code>func_font_size</code> <code>int</code> <p>Font size of function rectangle.</p> <code>func_value_format</code> <code>str</code> <p>Format string for result values. Inherented by element units.</p> <code>func_callee</code> <code>Callable</code> <p>Pointer to function that perform the functionality of this unit.</p> <code>func_args_width_list</code> <code>List[int]</code> <p>List of bit width of source operands.</p> <code>func_args_name_list</code> <code>List[str]</code> <p>List of name of source operands.</p> <code>func_res_width_list</code> <code>List[int]</code> <p>List of bit width of destination operands.</p> <code>func_res_name_list</code> <code>List[str]</code> <p>List of name of destination operands.</p> <code>func_args_count</code> <code>int</code> <p>Number of source operands</p> <code>func_res_count</code> <code>int</code> <p>Number of destination operands.</p>"},{"location":"1-references/10-objects/12-function-unit/#isa_manim.isa_objects.func_unit.FunctionUnit.require_serialization","title":"<code>require_serialization = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Animation related with this object must be serialized.</p>"},{"location":"1-references/10-objects/12-function-unit/#isa_manim.isa_objects.func_unit.FunctionUnit.__init__","title":"<code>__init__(name, color, args_width_list, res_width_list, args_name_list, res_name_list, font_size, value_format, func_callee)</code>","text":"<p>Constructor a function call.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Function name.</p> required <code>color</code> <code>Color</code> <p>Color of function rectangle, operand rectangles and operand name label.</p> required <code>args_width_list</code> <code>List[int]</code> <p>List of bit width of source operands.</p> required <code>res_width_list</code> <code>List[int]</code> <p>List of bit width of destination operands.</p> required <code>args_name_list</code> <code>List[str]</code> <p>List of name of source operands.</p> required <code>res_name_list</code> <code>List[str]</code> <p>List of name of destination operands.</p> required <code>font_size</code> <code>int</code> <p>Font size of function rectangle.</p> required <code>value_format</code> <code>str</code> <p>Format string for result values.</p> required <code>func_callee</code> <code>Callable</code> <p>Pointer to function that perform the functionality of this unit.</p> required"},{"location":"1-references/10-objects/12-function-unit/#isa_manim.isa_objects.func_unit.FunctionUnit.get_arg_pos","title":"<code>get_arg_pos(index, offset, elem_width)</code>","text":"<p>Return the center position of one specified source operand.</p> <p><code>elem_width</code> specifies the bit width of generated element unit, which equals the bit width of operand in most case. It is possible that generated element unit only cover a part of the specified operands. </p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Index of source operand.</p> required <code>offset</code> <code>int</code> <p>Offset of lower bits.</p> required <code>elem_width</code> <code>int</code> <p>Width of element in bits.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Position of the specified source operand.</p>"},{"location":"1-references/10-objects/12-function-unit/#isa_manim.isa_objects.func_unit.FunctionUnit.get_placement_height","title":"<code>get_placement_height()</code>","text":"<p>Return the height of this object for placement. The height is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The height of this object.</p>"},{"location":"1-references/10-objects/12-function-unit/#isa_manim.isa_objects.func_unit.FunctionUnit.get_placement_mark","title":"<code>get_placement_mark()</code>","text":"<p>Return the marker of this object for placement, which is 3.</p> <p>Returns:</p> Type Description <code>int</code> <p>Marker of this object.</p>"},{"location":"1-references/10-objects/12-function-unit/#isa_manim.isa_objects.func_unit.FunctionUnit.get_placement_width","title":"<code>get_placement_width()</code>","text":"<p>Return the width of this object for placement. The width is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The width of this object.</p>"},{"location":"1-references/10-objects/12-function-unit/#isa_manim.isa_objects.func_unit.FunctionUnit.get_res_pos","title":"<code>get_res_pos(index, offset, elem_width)</code>","text":"<p>Return the center position of one specified destination operand.</p> <p><code>elem_width</code> specifies the bit width of generated element unit, which equals the bit width of operand in most case. It is possible that generated element unit only cover a part of the specified operands. For example, 16-bit multiple operation generate 32-bit result.</p> <ul> <li>The whole destination operand is accessed if <code>index</code> is 0, <code>offset</code> is 0 and   <code>elem_width</code> is 16.</li> <li>Lower half of the product is accessed if <code>index</code> is 0, <code>offset</code> is 0 and   <code>elem_width</code> is 16.</li> <li>Higher half of the product is accessed if <code>index</code> is 0, <code>offset</code> is 16 and   <code>elem_width</code> is 16.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Index of destination operand.</p> required <code>offset</code> <code>int</code> <p>Offset of lower bits.</p> required <code>elem_width</code> <code>int</code> <p>Width of element in bits.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Position of the specified destination operand.</p>"},{"location":"1-references/10-objects/12-function-unit/#isa_manim.isa_objects.func_unit.FunctionUnit.set_placement_corner","title":"<code>set_placement_corner(row, col)</code>","text":"<p>Set the position of object by the left-up corner position. Move object to the specified position.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>Vertical ordinate of left-up corner.</p> required <code>col</code> <code>int</code> <p>Horizontal ordinate of left-up corner.</p> required"},{"location":"1-references/10-objects/13-memory-unit/","title":"Memory Unit","text":"<p><code>isa_manim.isa_object.mem_unit.MemUnit</code> presents one memory unit in ISA.</p> <p></p> <p>Source code: test_mem_unit.py</p> <p>As shown in the above figure, such an object contains the following Manim objects:</p> <ul> <li><code>mem_rect</code> presents the memory unit. The size of <code>mem_rect</code> is fixed as 4.0 x 3.0.</li> <li><code>name_text</code> presents the name of the memory unit, which is centrally aligned with <code>mem_rect</code>.</li> <li><code>addr_rect</code> presents the address port of the memory unit. The width of <code>addr_rect</code> presents the bit width of the address port.</li> <li><code>data_rect</code> presents the data port of the memory unit. The width of <code>data_rect</code> presents the bit width of the data port.</li> <li><code>mem_map_list</code> presents a list of rectangles for memory maps. Each rectangle presents a range in memory. The read/write operation on memory will add memory marks within the range of the rectangle that covers the accessed locations.</li> <li>The width of one rectangle of the memory map should cover <code>mem_rect</code>, <code>addr_rect</code> and <code>data_rect</code>.</li> <li>The height of one rectangle of the memory map is 1.0.</li> <li><code>mem_map_text</code> presents a list of texts that mark the lowest address and highest address of each rectangle for the memory map.</li> <li>Texts in <code>mem_map_text</code> are aligned with the left or right boundary of the rectangle for the memory map, and below the rectangle for the memory map.</li> </ul> <p>If there is only one rectangle for the memory map, the height of the entire memory unit is 6.0 because the rectangle and the texts of the memory map cost 1.0 in height individually.</p> <p>As the green dot shown in the above figure, the orign point of one memory unit is located in the center position of <code>mem_rect</code>, which is different from the geometry center position of this object. It is suggested to use function <code>shift</code> rather than function <code>move_to</code> to change the location of the register.</p> <p><code>get_addr_pos</code> and <code>get_data_pos</code> return the position within the address port and the data port. The width of elements may not cover the entire address port and the data port. For example, read one byte through a data bus of eight bytes. The option <code>width</code> provides the actual element width. It is assumed that elements are always placed at the lowest side.</p> <p>In some instructions, memory operations return status to present whether options succeed or not. By giving the option <code>status_width</code> in the constructor function a non-zero value, one <code>status_rect</code> is added within <code>mem_rect</code> to present the status port. <code>get_status_pos</code> returns the position within the status port.</p> <p></p> <p>Source code: test_mem_unit_status.py</p> <p>Several functions are provided to work with the animation to read/write the memory. See for details.</p> <p>The read/write-memory animation switch affects whether accessed locations match any memory map. Function <code>is_mem_range_cover</code> returns True if the accessed memory location has the matched memory map.</p> <p>Moreover, animations will generate address marks and memory marks to show the accessed location on memory maps. <code>get_addr_mark</code> returns one address mark at a specified address. <code>get_rd_mem_mark</code> and <code>get_wr_mem_mark</code> return memory marks covering the specified memory range.</p> <p>Address marks are cleared from the Manim scene before the end of one animation to read/write memory. But memory marks will stay in the Manim scene until the end of one animation section. Hence, the memory marks are collected in <code>mem_mark_list</code>. <code>append_mem_mark_list</code> appends one memory mark to <code>mem_mark_list</code>; <code>get_mem_mark_list</code> returns <code>mem_mark_list</code>.</p>"},{"location":"1-references/10-objects/13-memory-unit/#memunit","title":"MemUnit","text":"<p>             Bases: <code>VGroup</code></p> <p>Object for memory unit.</p> <p>Attributes:</p> Name Type Description <code>mem_rect</code> <code>RoundedRectangle</code> <p>Round rectangle of memory unit.</p> <code>name_text</code> <code>Text</code> <p>Name of memory unit.</p> <code>addr_rect</code> <code>Rectangle</code> <p>Rectangle of address operand.</p> <code>data_rect</code> <code>Rectangle</code> <p>Rectangle of data operand.</p> <code>mem_map_list</code> <code>List[Rectangle]</code> <p>List of rectangles of memory map ranges.</p> <code>mem_map_text</code> <code>List[Tuple[Text, Text]]</code> <p>List of text of memory map ranges. Each item in the list is a pair of loweset and highest address.</p> <code>mem_mark_list</code> <code>List[Rectangle]</code> <p>List of memory marks.</p> <code>mem_map_left_brace</code> <code>CubicBezier</code> <p>Left brace of memory map.</p> <code>mem_map_right_brace</code> <code>CubicBezier</code> <p>Right brace of memory map. </p> <code>mem_color</code> <code>Color</code> <p>Color of memory unit.</p> <code>mem_addr_width</code> <code>int</code> <p>Bit width of address operand.</p> <code>mem_data_width</code> <code>int</code> <p>Bit width of data operand.</p> <code>mem_addr_align</code> <code>int</code> <p>Align requirement of address.</p> <code>mem_font_size</code> <code>int</code> <p>Font size of name text.</p> <code>mem_value_format</code> <code>int</code> <p>Format string for data values. Inherented by element units.</p> <code>mem_range</code> <code>List[Tuple[int, int]]</code> <p>List of memory range.</p> <code>mem_map_width</code> <code>int</code> <p>Width of memory map rectangle.</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.__init__","title":"<code>__init__(color, addr_width, data_width, addr_align, mem_range, font_size, value_format, para_enable, status_width, mem_map_width)</code>","text":"<p>Constructor an function call.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>Color</code> <p>Color of memory unit.</p> required <code>addr_width</code> <code>int</code> <p>Width of address, in bit</p> required <code>data_width</code> <code>int</code> <p>Width of data, in bit</p> required <code>addr_align</code> <code>int</code> <p>Alignment of memory range address.</p> required <code>mem_range</code> <code>List[Tuple[int, int]]</code> <p>List of memory range, each item is a pair of lowest address and highest address.</p> required <code>font_size</code> <code>int</code> <p>Font size of memory name.</p> required <code>value_format</code> <code>str</code> <p>Format string for result values. Inherented by element units.</p> required <code>para_enable</code> <code>bool</code> <p>Whether the animation related to this memory unit can perform parallel or not.</p> required <code>mem_map_width</code> <code>int</code> <p>Hint for width of memory map width.</p> required"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.append_mem_mark_list","title":"<code>append_mem_mark_list(mark)</code>","text":"<p>Append one mark to memory mark list.</p> <p>Parameters:</p> Name Type Description Default <code>mark</code> <code>Rectangle</code> <p>Memory mark to append.</p> required"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_addr_mark","title":"<code>get_addr_mark(addr, color)</code>","text":"<p>Create an triangle to point the specified address in memory map rectangle.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>int</code> <p>The specified address.</p> required <code>color</code> <code>Color</code> <p>Color of address mark.</p> required <p>Returns:</p> Type Description <code>Triangle</code> <p>Triangle object of address mark.</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_addr_pos","title":"<code>get_addr_pos(width)</code>","text":"<p>Return center position of address port.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Bit width of address.</p> required"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_data_pos","title":"<code>get_data_pos(width)</code>","text":"<p>Return center position of data port.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Bit width of data.</p> required"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_mem_mark_list","title":"<code>get_mem_mark_list()</code>","text":"<p>Return the list of memory marks.</p> <p>Returns:</p> Type Description <code>List[Rectangle]</code> <p>The list of memory marks.</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_placement_height","title":"<code>get_placement_height()</code>","text":"<p>Return the height of this object for placement. The height is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The height of this object.</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_placement_mark","title":"<code>get_placement_mark()</code>","text":"<p>Return the marker of this object for placement, which is 4.</p> <p>Returns:</p> Type Description <code>int</code> <p>Marker of this object.</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_placement_width","title":"<code>get_placement_width()</code>","text":"<p>Return the width of this object for placement. The width is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The width of this object.</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_rd_mem_mark","title":"<code>get_rd_mem_mark(laddr, raddr, color)</code>","text":"<p>Create one rectangle to cover the memory range specified by <code>[laddr, raddr)</code> in memory map rectangle.</p> <p>The height of the memory mark is 0.34 (1/3 of the height of memory map rectangle). </p> <p>Parameters:</p> Name Type Description Default <code>laddr</code> <code>int</code> <p>Minimum address of memory range.</p> required <code>raddr</code> <code>int</code> <p>Maximum address of memory range.</p> required <code>color</code> <code>Color</code> <p>Color of address mark.</p> required <p>Returns:</p> Type Description <code>Rectangle</code> <p>Rectangle object of memory mark.</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_status_pos","title":"<code>get_status_pos(width)</code>","text":"<p>Return center position of status port.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Bit width of status.</p> required"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.get_wt_mem_mark","title":"<code>get_wt_mem_mark(laddr, raddr, color)</code>","text":"<p>Create one rectangle to cover the memory range specified by <code>[laddr, raddr)</code> in memory map rectangle.</p> <p>The height of the memory mark is 0.66 (2/3 of the height of memory map rectangle). </p> <p>Parameters:</p> Name Type Description Default <code>laddr</code> <code>int</code> <p>Minimum address of memory range.</p> required <code>raddr</code> <code>int</code> <p>Maximum address of memory range.</p> required <code>color</code> <code>Color</code> <p>Color of address mark.</p> required <p>Returns:</p> Type Description <code>Rectangle</code> <p>Rectangle object of memory mark.</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.has_status_port","title":"<code>has_status_port()</code>","text":"<p>Return whether the memory unit has status port.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Return true if the memory unit has status port</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.is_mem_range_cover","title":"<code>is_mem_range_cover(addr)</code>","text":"<p>Check whether given address is covered in memory map ranges.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>int</code> <p>Address to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>If the specified address is covered in memory map ranges, return True. Otherwise, return False.</p>"},{"location":"1-references/10-objects/13-memory-unit/#isa_manim.isa_objects.mem_unit.MemoryUnit.set_placement_corner","title":"<code>set_placement_corner(row, col)</code>","text":"<p>Set the position of object by the left-up corner position. Move object to the specified position.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>Vertical ordinate of left-up corner.</p> required <code>col</code> <code>int</code> <p>Horizontal ordinate of left-up corner.</p> required"},{"location":"1-references/10-objects/14-element-unit/","title":"Element Unit","text":"<p><code>isa_manim.isa_objects.one_dim_reg_elem</code> presents one element in registers, function units and memory units. This object can be used to present data reading from/writing to one register, moving between registers, function units and memory units.</p> <p></p> <p>Source code: test_elem_unit.py</p> <p>As shown in the above figures, one element unit contains the following Manim objects: - <code>elem_rect</code> presents the element.   - The width of <code>elem_rect</code> presents the bit width of the register.   - The height of <code>elem_rect</code> is 1.0.   - In a normal situation, <code>elem_rect</code> is filled with the same color as the boundary and opacity is set to 0.5. - <code>value_text</code> presents the value of the element, which is centrally aligned with <code>elem_rect</code>.</p> <p>In the case of zero-extend, some MSBs are forced to zero. In this case, the element unit contains four Manim objects: - <code>elem_rect</code> still presents the element as above. But the <code>elem_rect</code> is transparent. - Another Rectangle object <code>fill_elem_rect</code> is used to cover the non-zero bits.  - <code>value_text</code> presents the value of the element, which is centrally aligned with <code>fill_elem_rect</code>. - Another Text object <code>fill_value_text</code> with a string of \"0\" is used to cover the zero bits.</p> <p></p> <p>Source code: test_elem_unit_zero.py</p> <p><code>fill_elem_rect</code> and <code>fill_value_text</code> are not public members.</p> <p>The origin point is located in the center position of <code>elem_rect</code>  as same as the center position of this object.</p> <p>Element units can maintain a value as a normal variable. The value is specified by the option <code>value</code> in the constructor function. The value can be read out by public member <code>elem_value</code>. To simplify predicate cases, <code>__bool_</code> is overridden so that element units can be directly used after <code>if</code>.</p> <p>If one element has been assigned a valid value, the value will be displayed. The format to print the value is defined by a format string as Python. For example, <code>\":d\"</code> means decimal format and <code>\"0x:x\"</code> means hexadecimal format. The value format is specified by the option <code>value_format</code> in the constructor function.</p>"},{"location":"1-references/10-objects/14-element-unit/#elemunit","title":"ElemUnit","text":"<p>             Bases: <code>VGroup</code></p> <p>Object for register element.</p> <p>Attributes:</p> Name Type Description <code>elem_rect</code> <code>Rectangle</code> <p>Rectangle of element unit.</p> <code>value_text</code> <code>Text</code> <p>Text of element value.</p> <code>elem_color</code> <code>Color</code> <p>Color of element rectangle and value text.</p> <code>elem_width</code> <code>int</code> <p>Bit width of element.</p> <code>elem_value</code> <code>Any</code> <p>Value of this element.</p> <code>elem_fill_opacity</code> <code>float</code> <p>Fill opacity of this element.</p> <code>elem_font_size</code> <code>int</code> <p>Font size of value text.</p> <code>elem_value_format</code> <code>str</code> <p>Format to print data value.</p> <code>elem_high_bits</code> <code>int</code> <p>Specify a number of Most significant bits.</p> <code>elem_high_zero</code> <code>bool</code> <p>True means the higher part of the register is forced to zero.</p>"},{"location":"1-references/10-objects/14-element-unit/#isa_manim.isa_objects.elem_unit.ElemUnit.require_serialization","title":"<code>require_serialization = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Animation related with this object does not need to be serialized.</p>"},{"location":"1-references/10-objects/14-element-unit/#isa_manim.isa_objects.elem_unit.ElemUnit.__bool__","title":"<code>__bool__()</code>","text":"<p>Return whether the value of element is True of False. Used by predicate mask.</p>"},{"location":"1-references/10-objects/14-element-unit/#isa_manim.isa_objects.elem_unit.ElemUnit.__init__","title":"<code>__init__(color, width, value, fill_opacity, font_size, value_format, high_bits, high_zero)</code>","text":"<p>Constructor an element.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>Color</code> <p>Color of this element.</p> required <code>width</code> <code>int</code> <p>Width of this element, in bit.</p> required <code>value</code> <code>Any</code> <p>Value of this element, which should be Any type rather than array.</p> required <code>fill_opacity</code> <code>float</code> <p>Fill opacity of this element.</p> required <code>font_size</code> <code>int</code> <p>Font size of value text.</p> required <code>value_format</code> <code>str</code> <p>Format to print data value.</p> required <code>high_bits</code> <code>int</code> <p>Specify a number of Most significant bits.</p> required <code>high_zero</code> <code>bool</code> <p>True means the higher part of the register is forced to zero.</p> required"},{"location":"1-references/10-objects/14-element-unit/#isa_manim.isa_objects.elem_unit.ElemUnit.get_elem_pos","title":"<code>get_elem_pos(offset, elem_width)</code>","text":"<p>Return the center position of another element that is right-aligned with current element. <code>offset</code> specifies the offset of the lowest bit.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>Offset of lower bits.</p> required <code>elem_width</code> <code>int</code> <p>Width of element in bits.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>Position of the specified element.</p>"},{"location":"1-references/10-objects/14-element-unit/#isa_manim.isa_objects.elem_unit.ElemUnit.get_placement_height","title":"<code>get_placement_height()</code>","text":"<p>Return the height of this object for placement. The height is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The height of this object.</p>"},{"location":"1-references/10-objects/14-element-unit/#isa_manim.isa_objects.elem_unit.ElemUnit.get_placement_mark","title":"<code>get_placement_mark()</code>","text":"<p>Return the marker of this object, which is 2.</p> <p>Returns:</p> Type Description <code>int</code> <p>Marker of this object.</p>"},{"location":"1-references/10-objects/14-element-unit/#isa_manim.isa_objects.elem_unit.ElemUnit.get_placement_width","title":"<code>get_placement_width()</code>","text":"<p>Return the width of this object for placement. The width is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The width of this object.</p>"},{"location":"1-references/10-objects/14-element-unit/#isa_manim.isa_objects.elem_unit.ElemUnit.set_placement_corner","title":"<code>set_placement_corner(row, col)</code>","text":"<p>Set the position of object by the left-up corner position. Move object to the specified position.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>Vertical ordinate of left-up corner.</p> required <code>col</code> <code>int</code> <p>Horizontal ordinate of left-up corner.</p> required"},{"location":"1-references/20-animation/","title":"Animation for ISA Behaviors","text":"<p>isa_manim provides several animations that appear in ISA frequently so that users can build up ISA behaviors simply by choosing appropriate functions.</p> <p>Animations can be categorized into three categories:</p> <ul> <li>Animation for Registers and Elements, including declaring and replacing registers, as well as reading, assigning and replacing elements.</li> <li>Animation for Functions, including declaring and calling functions.</li> <li>Animation for Memory, including declaring and reading/writing memory.</li> </ul> <p>isa_manim provides one function for each kind of animation. Each function accepts related objects and parameters as input. Each function returns an entity of animation. Functions for animations do not create any objects.</p> <p>It is not suggested to directly call animation functions in user's codes. Instead, please use APIs provided in ISA scenes.</p>"},{"location":"1-references/20-animation/21-register-animation/","title":"Animations for Registers and Elements","text":"<p><code>isa_manim.isa_animate.register_animate.decl_register</code> declares registers by fading in all provided register objects.</p> <p><code>isa_manim.isa_animate.register_animate.replace_register</code> replaces one existing register object with a new register object by transform. </p> <p>An example for <code>decl_register</code> and <code>replace_register</code> is as below:</p> <p></p> <p>Source code: test_reg_animation.py</p> <p><code>isa_manim.isa_animate.register_animate.read_elem</code> reads one data element from one register by fading in the provided element at the specified position.</p> <p><code>isa_manim.isa_animate.register_animate.assign_elem</code> assigns one data element to one register by moving the data element to the specified location related to the provided register.</p> <p>It is not required that the target element must share the same shape and color as the origin element.</p> <p>An example for <code>read_elem</code> and <code>assign_elem</code> is as below:</p> <p></p> <p>Source code: test_elem_animation.py</p> <p>See <code>isa_manim.isa_objects.reg_unit.RegUnit.get_elem_pos</code> and <code>isa_manim.isa_objects.elem_unit.ElemUnit.get_elem_pos</code> for detail about how to index one element within one register unit or one element unit.</p> <p><code>isa_manim.isa_animate.register_animate.replace_elem</code> replaces the existing data element object with a new data element object by transform.</p> <p>The above functions generate a sequence of animations, but they do not register animation to Manim unless <code>play()</code> is applied on the result values</p>"},{"location":"1-references/20-animation/21-register-animation/#register_animate","title":"register_animate","text":"<p>Animation with Registers and Elements.</p>"},{"location":"1-references/20-animation/21-register-animation/#isa_manim.isa_animate.register_animate.assign_elem","title":"<code>assign_elem(old_elem, new_elem, vector, index, reg_idx, offset)</code>","text":"<p>Assign one element to the register. Move element to the specified location related to the register.</p> <p>Instead of move animation, this function uses transform animation. <code>new_elem</code> can use different width, color, and value from the <code>old_elem</code>.</p> <p>Parameters:</p> Name Type Description Default <code>old_elem</code> <code>ElemUnit</code> <p>Element object before animation.</p> required <code>new_elem</code> <code>ElemUnit</code> <p>Element object after animation.</p> required <code>vector</code> <code>RegUnit</code> <p>Register object.</p> required <code>index</code> <code>int</code> <p>Index of element.</p> required <code>reg_idx</code> <code>int</code> <p>register index.</p> required <code>offset</code> <code>int</code> <p>Offset of lowest bit.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to assign an element to a register.</p>"},{"location":"1-references/20-animation/21-register-animation/#isa_manim.isa_animate.register_animate.decl_register","title":"<code>decl_register(*registers)</code>","text":"<p>Declare registers. Fadein a list of register objects.</p> <p>Parameters:</p> Name Type Description Default <code>registers</code> <code>List[Union[RegUnit]]</code> <p>List of registers.</p> <code>()</code> <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to declare registers.</p>"},{"location":"1-references/20-animation/21-register-animation/#isa_manim.isa_animate.register_animate.read_elem","title":"<code>read_elem(vector, elem, index, reg_idx, offset)</code>","text":"<p>Read specified element from one register. Fade in element at the specified position related to the register.</p> <p>Parameters:</p> Name Type Description Default <code>vector</code> <code>RegUnit</code> <p>Object of the register.</p> required <code>elem</code> <code>ElemUnit</code> <p>Object of the element.</p> required <code>index</code> <code>int</code> <p>Element index.</p> required <code>reg_idx</code> <code>int</code> <p>Register index. Used only for two-dimension register units.</p> required <code>offset</code> <code>int</code> <p>Offset of lowest bit.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to read an element from a register.</p>"},{"location":"1-references/20-animation/21-register-animation/#isa_manim.isa_animate.register_animate.replace_elem","title":"<code>replace_elem(old_elem, new_elem, offset)</code>","text":"<p>Replace exist element with a new element. The new element is right-aligned with the existed element. <code>offset</code> specifies the gap between the LSB of two registers, which can be positive or negative.</p> <p>Parameters:</p> Name Type Description Default <code>old_elem</code> <code>ElemUnit</code> <p>Object of the old element.</p> required <code>new_elem</code> <code>ElemUnit</code> <p>Object of the new element.</p> required <code>offset</code> <code>int</code> <p>Offset of lower bits.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to declare registers.</p>"},{"location":"1-references/20-animation/21-register-animation/#isa_manim.isa_animate.register_animate.replace_register","title":"<code>replace_register(old_reg, new_reg, offset)</code>","text":"<p>Replacing exist register with a new register. The new register is right-aligned with the old register. <code>offset</code> specifies the gap between the LSB of two registers, which can be positive or negative.</p> <p>Parameters:</p> Name Type Description Default <code>old_reg</code> <code>RegUnit</code> <p>Object of the old vector.</p> required <code>new_reg</code> <code>RegUnit</code> <p>Object of the new vector.</p> required <code>offset</code> <code>int</code> <p>Offset of lower bits.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to replace registers.</p>"},{"location":"1-references/20-animation/22-function-animation/","title":"Animations For Function Units","text":"<p><code>isa_manim.isa_animate.function_animate.decl_function</code> declares one function unit by fading in.</p> <p><code>isa_manim.isa_animate.function_animate.read_func_imm</code> declares one immediate operand of one function unit. The immediate operand will fade in at the specified position while other operands move to their positions.</p> <p><code>isa_manim.isa_animate.function_animate.function_call</code> presents how elements pass through one function unit. The animation has two steps.</p> <ul> <li>In the first step, argument elements move to arguments of one function unit.</li> <li>In the second step, argument elements fade out while result elements fade in.</li> </ul> <p>An example for <code>decl_function</code>, <code>read_func_imm</code> and <code>function_call</code> is as below:</p> <p></p> <p>Source code: test_func_animation.py</p> <p>The above functions generate a sequence of animations, but they do not register animation to Manim unless <code>play()</code> is applied on the result values</p>"},{"location":"1-references/20-animation/22-function-animation/#function_animate","title":"function_animate","text":"<p>Animation with Function unit.</p>"},{"location":"1-references/20-animation/22-function-animation/#isa_manim.isa_animate.function_animate.decl_func_unit","title":"<code>decl_func_unit(*func_unit)</code>","text":"<p>Declare one function unit.</p> <p>Parameters:</p> Name Type Description Default <code>func_unit</code> <code>List[FunctionUnit]</code> <p>Object of function.</p> <code>()</code> <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to declare function unit.</p>"},{"location":"1-references/20-animation/22-function-animation/#isa_manim.isa_animate.function_animate.function_call","title":"<code>function_call(func_unit, args_list, res_list, args_offset, res_offset)</code>","text":"<p>Animation for calling one function.</p> <p>This animation has the following steps:</p> <ul> <li>Move elements of source operands to the position of arguments.</li> <li>Wait 0.5 second.</li> <li>Fadeout the source operands and fadein the destination operands.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>func_unit</code> <code>FunctionUnit</code> <p>Object of function object.</p> required <code>args_list</code> <code>List[ElemUnit]</code> <p>List of argument elements.</p> required <code>res_list</code> <code>List[ElemUnit]</code> <p>List of result elements.</p> required <code>args_offset</code> <code>List[int]</code> <p>Offset of LSB of each argument.</p> required <code>res_offset</code> <code>List[int]</code> <p>Offset of LSB of each result.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to calling one function.</p>"},{"location":"1-references/20-animation/22-function-animation/#isa_manim.isa_animate.function_animate.read_func_imm","title":"<code>read_func_imm(elem)</code>","text":"<p>Animation for declare one immediate operand. Fade in element at the specified location related to the function unit.</p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Object of the immediate element.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to declare immediate operand.</p>"},{"location":"1-references/20-animation/23-memory-animation/","title":"Animations for Memory Units","text":"<p><code>isa_manim.isa_animate.memory_animate.decl_memory_unit</code> declares one memory unit by fading in.</p> <p><code>isa_manim.isa_animate.memory_animate.read_memory</code> and <code>isa_manim.isa_animate.memory_animate.read_memory_without_addr</code> presents the animation to read data from memory. <code>isa_manim.isa_animate.memory_animate.write_memory</code> and <code>isa_manim.isa_animate.memory_animate.write_memory_without_addr</code> presents the animation to write data to memory. These four functions perform different animations according to some conditions of operations.</p> <p>If the address element does not provide a valid address or the provided address does not match any memory map, the accessed memory locations cannot be marked on memory maps of the memory unit. In this situation, <code>read_memory_without_addr</code> and <code>write_memory_without_addr</code> are applied.</p> <ul> <li>By the first step in <code>read_memory_without_addr</code>, the address element moves to the address port. Then the address element fades out while the data element fades in. At last, the data element can be observed at the data port.</li> <li>By the first step in <code>write_memory_without_addr</code>, the address element moves to the address port and the data element moves to the data port first. Then both the address element and the data element fade out.</li> </ul> <p>At last, a status element fades in if the memory unit has a status port and a status element is provided to function <code>read_memory_without_addr</code> and <code>write_memory_without_addr</code>.</p> <p>An example for <code>decl_memory_unit</code>, <code>read_memory_without_addr</code> and <code>write_memory_without_addr</code> is as below:</p> <p></p> <p>Source code: test_memory_animation_without_addr.py</p> <p><code>read_memory_without_addr</code> and <code>write_memory_without_addr</code> do not work with vector load/store instructions. If the memory unit allows parallel animations, the address elements and data elements for different vector elements will overlap together at the address port and then data port. If the memory unit does not allow parallel animations, the animation for one instruction has to cost a much longer time since elements must be handled one by one.</p> <p>The distribution of accessed memory locations is very important to explain the instruction behaviors. It is not suggested to use <code>read_memory_without_addr</code> and <code>write_memory_without_addr</code> in new animations. It is expected that address elements always have valid address values to present in memory maps.</p> <p>It is suggested to use <code>read_memory</code> and <code>write_memory</code> to generate animations with memory units. The major difference between <code>read_memory</code>/<code>write_memory</code> and <code>read_memory_without_addr</code>/<code>write_memory_without_addr</code> lies in that <code>read_memory</code>/<code>write_memory</code> marks the accessed memory locations. The animation has three steps: moving address elements, marking address position, marking address range and fading in the status element.</p> <p>The behavior in the first step depends on whether the memory unit allows parallel animation and whether the actual address matches the value in <code>addr_item</code> (presented by the option <code>addr_match</code>).</p> <ul> <li>Move the address element to the address port when the memory unit does not allow parallel animations and the actual address matches the value in <code>addr_item</code>.</li> <li>Move the data element to the data port simultaneously when <code>write_memory</code> is called.</li> <li>Highlight the address element when the memory unit allows parallel animations and the actual address matches the value in <code>addr_item</code>.</li> <li>Otherwise, just wait one second to keep the synchronization of animations for vector elements.</li> </ul> <p>In the second step, the address element is transformed into the address mark on the matched memory map when the actual address matches the value in <code>addr_item</code>. The address mark is one triangle handed down. If the actual address to read is not the same as the value in <code>addr_item</code>, fade in the address mark.</p> <p>In the third step, the behavior depends on whether the memory unit allows parallel animation.</p> <ul> <li>If the memory unit allows parallel animation,</li> <li><code>read_memory</code> creates one memory mark on the matched memory map.</li> <li><code>write_memory</code> transforms the data element into a data mark on the memory map.</li> <li>If the memory unit does not allow parallel animation,</li> <li><code>read_memory</code> creates one memory mark on the matched memory map and then transforms the memory map to a data element at the data port.</li> <li><code>write_memory</code> transforms the data element into a data mark on the memory map.</li> </ul> <p>At last, a status element fades in if the memory unit has a status port and a status element is provided to function <code>read_memory_without_addr</code> and <code>write_memory_without_addr</code>.</p> <p>A serialization example for <code>decl_memory_unit</code>, <code>read_memory</code> and <code>write_memory</code> is as below.</p> <p></p> <p>Source code: test_memory_animation.py</p> <p>A parallel example for <code>decl_memory_unit</code>, <code>read_memory</code> and <code>write_memory</code> is as below. The status port also has output in this example.</p> <p></p> <p>Source code: test_memory_animation_parallel.py</p> <p>The above functions generate a sequence of animations, but they do not register animation to Manim unless <code>play()</code> is applied on the result values</p>"},{"location":"1-references/20-animation/23-memory-animation/#memory_animate","title":"memory_animate","text":"<p>Animation with Memory Unit.</p>"},{"location":"1-references/20-animation/23-memory-animation/#isa_manim.isa_animate.memory_animate.decl_memory_unit","title":"<code>decl_memory_unit(mem_unit)</code>","text":"<p>Declare one memory unit.</p> <p>Parameters:</p> Name Type Description Default <code>mem_unit</code> <code>MemoryUnit</code> <p>Object of memory.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to declare memory unit.</p>"},{"location":"1-references/20-animation/23-memory-animation/#isa_manim.isa_animate.memory_animate.read_memory","title":"<code>read_memory(mem_unit, addr_item, data_item, status_item, addr_mark, mem_mark, addr_match)</code>","text":"<p>Read data from one memory unit.</p> <p>Step of this animation is as below:</p> <ul> <li>Move the address element to the address port only when the memory unit does not allow parallel     animations and the actual address matches value in <code>addr_item</code>.<ul> <li>Highlight indicate the address element when the memory unit allows parallel animations     and the actual address matches value in <code>addr_item</code>.</li> <li>Otherwise, wait 1s.</li> </ul> </li> <li>Transform the address element to the address mark on the matched memory map.<ul> <li>If the actual address to read is not same as the value in <code>addr_item</code>, fadein the address     mark.</li> </ul> </li> <li>Create memory mark on the matched memory map.</li> <li>Move memory mark to the data port if the memory unit only allows serialized animations.</li> <li>Fadein the status element if <code>status_item</code> is provided and the <code>mem_unit</code> has <code>status_rect</code>.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>mem_unit</code> <code>MemoryUnit</code> <p>Object of memory unit.</p> required <code>addr_item</code> <code>ElemUnit</code> <p>Address element.</p> required <code>data_item</code> <code>ElemUnit</code> <p>Data element.</p> required <code>status_item</code> <code>Union[ElemUnit, None]</code> <p>Status element.</p> required <code>addr_mark</code> <code>Triangle</code> <p>Address mark.</p> required <code>mem_mark</code> <code>Rectangle</code> <p>Memory mark.</p> required <code>addr_match</code> <code>bool</code> <p>True means the actual address to read is same as the value of <code>addr_item</code>.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to read data from memory unit.</p>"},{"location":"1-references/20-animation/23-memory-animation/#isa_manim.isa_animate.memory_animate.read_memory_without_addr","title":"<code>read_memory_without_addr(mem_unit, addr_item, data_item, status_item)</code>","text":"<p>Read data from one memory unit.</p> <p>Because the address element does not provide an address, or the provided address does not match the range of memory maps, address marks and memory marks cannot be generated and displayed.</p> <p>Step of this animation is as below:</p> <ul> <li>Move the address element to the address port.</li> <li>Fadeout the address element and fadein the data element.</li> <li>Fadein the status element if <code>status_item</code> is provided and the <code>mem_unit</code> has <code>status_rect</code>.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>mem_unit</code> <code>MemoryUnit</code> <p>Object of memory unit.</p> required <code>addr_item</code> <code>ElemUnit</code> <p>Address element.</p> required <code>data_item</code> <code>ElemUnit</code> <p>Data element.</p> required <code>status_item</code> <code>Union[ElemUnit, None]</code> <p>Status element.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to read data from memory unit.</p>"},{"location":"1-references/20-animation/23-memory-animation/#isa_manim.isa_animate.memory_animate.write_memory","title":"<code>write_memory(mem_unit, addr_item, data_item, status_item, addr_mark, mem_mark, addr_match)</code>","text":"<p>Write data to one memory unit.</p> <p>Step of this animation is as below:</p> <ul> <li>Move the address element to the address port and move the data element to the data port only     when the memory unit does not allow parallel animations and the actual address matches value     in <code>addr_item</code>.<ul> <li>Highlight indicate the address element when the memory unit allows parallel animations     and the actual address matches value in <code>addr_item</code>.</li> <li>Otherwise, wait 1s.</li> </ul> </li> <li>Transform the address element to the address mark on the matched memory map.<ul> <li>If the actual address to read is not same as the value in <code>addr_item</code>, fadein the address     mark.</li> </ul> </li> <li>Move the data element to the data port to the memory mark if the memory unit only allows     serialized animations.<ul> <li>Otherwise, create memory mark on the matched memory map.</li> </ul> </li> <li>Fadein the status element if <code>status_item</code> is provided and the <code>mem_unit</code> has <code>status_rect</code>.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>mem_unit</code> <code>MemoryUnit</code> <p>Object of memory unit.</p> required <code>addr_item</code> <code>ElemUnit</code> <p>Address element.</p> required <code>data_item</code> <code>ElemUnit</code> <p>Data element.</p> required <code>status_item</code> <code>Union[ElemUnit, None]</code> <p>Status element.</p> required <code>addr_mark</code> <code>Triangle</code> <p>Address mark.</p> required <code>mem_mark</code> <code>Rectangle</code> <p>Memory mark.</p> required <code>addr_match</code> <code>bool</code> <p>True means the actual address to write is same as the value of <code>addr_item</code>.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to write data to memory unit.</p>"},{"location":"1-references/20-animation/23-memory-animation/#isa_manim.isa_animate.memory_animate.write_memory_without_addr","title":"<code>write_memory_without_addr(mem_unit, addr_item, data_item, status_item)</code>","text":"<p>Write data to one memory unit.</p> <p>Because the address element does not provide an address, or the provided address does not match the range of memory maps, address marks and memory marks cannot be generated and displayed.</p> <p>Step of this animation is as below:</p> <ul> <li>Move the address element to the address port, and move the data element to the data port.</li> <li>Fadeout the address element and data element.</li> <li>Fadein the status element if <code>status_item</code> is provided and the <code>mem_unit</code> has <code>status_rect</code>.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>mem_unit</code> <code>MemoryUnit</code> <p>Object of memory unit.</p> required <code>addr_item</code> <code>ElemUnit</code> <p>Address element.</p> required <code>data_item</code> <code>ElemUnit</code> <p>Data element.</p> required <code>status_item</code> <code>Union[ElemUnit, None]</code> <p>Status element.</p> required <p>Returns:</p> Type Description <code>Animation</code> <p>Animation to write data to memory unit.</p>"},{"location":"1-references/30-scene/","title":"Scene","text":"<p>In below pages introduce the implementation details about the auto-placement and auto-schedule of animations.</p> <ul> <li>The Color map assigns color to element units automatically.</li> <li>The Placement places the register units, function units and memory units on the scene automatically.</li> <li>The Animation flow and the Reference counter introduce how to schedule the animation flow.</li> </ul>"},{"location":"1-references/30-scene/31-color-map/","title":"Color map","text":"<p><code>isa_manim.isa_scene.isa_color_map.IsaColorMap</code> provides the functionality to manage object colors. The default color and the color scheme can all be changed by the constructor function.</p> <p>The color of objects can be controlled by a hash. The objects with the same hash value share the same color.</p>"},{"location":"1-references/30-scene/31-color-map/#isacolormap","title":"IsaColorMap","text":"<p>This class is used to map colors for ISA objects by allocating colors in the color scheme.</p> <p>Attributes:</p> Name Type Description <code>colormap_default_color</code> <code>Color</code> <p>Default color, used by registers, function units and memory units. Default is WHITE.</p> <code>_colormap_color_list</code> <code>List[Color]</code> <p>List of color scheme. Default is [RED, BLUE, GREEN, YELLOW, TEAL, PURPLE, MAROON].</p> <code>_colormap_color_index</code> <code>int</code> <p>Index points to the last picked color.</p> <code>_colormap_hash_dict</code> <code>Dict[Union[int, str], Color]</code> <p>Dictionary of objects and their color. Key of the dictionary is the  hash value and the value is assigned color.</p>"},{"location":"1-references/30-scene/31-color-map/#isa_manim.isa_scene.isa_color_map.IsaColorMap.__init__","title":"<code>__init__(default_color=WHITE, color_scheme=None)</code>","text":"<p>Construct color map.</p> <p>Parameters:</p> Name Type Description Default <code>default_color</code> <code>Color</code> <p>Default color.</p> <code>WHITE</code> <code>color_scheme</code> <code>List[Color]</code> <p>Color scheme.</p> <code>None</code>"},{"location":"1-references/30-scene/31-color-map/#isa_manim.isa_scene.isa_color_map.IsaColorMap.colormap_get_color","title":"<code>colormap_get_color(color_hash, num=1)</code>","text":"<p>Get one color or one list of colors for one given hash value.</p> <ul> <li>If the hash value exists in the color map, return the assigned color from dictionary.</li> <li>Otherwise, return the next color or next colors in the color scheme.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>color_hash</code> <code>Union[int, str]</code> <p>Hash for item.</p> required <code>num</code> <code>int</code> <p>Number of color.</p> <code>1</code> <p>Returns:</p> Type Description <code>Union[Color, List[Color]]</code> <p>If <code>num</code> is 1, return a single color. If <code>num</code> is larger than 1, return a list of</p> <code>Union[Color, List[Color]]</code> <p>colors.</p>"},{"location":"1-references/30-scene/31-color-map/#isa_manim.isa_scene.isa_color_map.IsaColorMap.colormap_reset","title":"<code>colormap_reset()</code>","text":"<p>Reset color map.</p> <p>Reset color index and clear hash dictionary.</p>"},{"location":"1-references/30-scene/32-placement/","title":"Objects Placement","text":"<p><code>isa_manim.isa_scene.isa_placement.IsaPlacementMap</code> provides the data structures and function interfaces for object placement. The major duty of <code>IsaPlacementMap</code> includes:</p> <ul> <li><code>_placement_object_dict</code> provides one dictionary of objects in the scene. The key of the dictionary can be an integer or string. The value of the dictionary is an entity of <code>isa_manim.isa_scene.isa_placement.IsaPlacementItem</code>. The data structure provides the position information of one object.</li> <li><code>_placement_map</code> presents the placement map as a 2-D array of an integer. Each element in the array presents the status of one single square of the grid.</li> </ul> <p><code>IsaPlacementMap</code> provides several groups of APIs to operate the dictionary and the map. At first, <code>has_object</code> and <code>get_object</code> are used to operate the placement dictionary. <code>has_object</code> checks whether one specified hash exists in the dictionary and <code>get_object</code> returns the object associated with the specified hash.</p> <p>Then, <code>place_object</code> adds one single object to the placement map and <code>place_object_group</code> adds a group of objects to the placement map. Both of these two functions call <code>place_placement_item</code> to find an appropriate space to place objects.</p> <p>The following functions return the status of the placement map:</p> <ul> <li><code>get_placement_width</code> and <code>get_placement_height</code> returns the width and height of the actual occupied map. Only occupied columns/rows or margins are counted.</li> <li><code>get_placement_origin</code> returns the central position of the placement map.</li> <li><code>get_camera_scale</code> returns the scale factor of the placement to fit into a specified camera. The value provided by this camera is used to show all objects in the scene by scaling the camera.</li> <li><code>dump_placement</code> returns a string to present the placement for debugging.</li> </ul> <p>The following functions operate on the placement map. <code>reset_placement</code> removes all placed objects and resizes the placement map to the initialization size. <code>resize_placement</code> resizes the placement map to a specified size while keeping all placed objects.</p>"},{"location":"1-references/30-scene/32-placement/#flow-charts","title":"Flow charts","text":"<p>The flow charts to add one single object in the placement map:</p> <pre><code>flowchart LR\n\nsubgraph place_object\nA1[Get align row if necessary]\nA2[Create a placement item]\nA3[Add item to the placement dictionary]\nA4[End]\n\nA1--&gt;A2--&gt;A3==&gt;B1\n\nsubgraph place_placement_item\nB1[Try to place item into the placement map]\nB2{Placement success}\nB3[Mark the item in the placement map]\nB4[Resize the placement with a fix h/w ratio]\nend\n\nB1--&gt;B2\nB2--\"Yes\"--&gt;B3==&gt;A4\nB2--\"No\"--&gt;B4--&gt;B1\n\nend</code></pre> <p>The flow graph to add one group of objects in the placement map:</p> <pre><code>flowchart LR\n\nsubgraph place_object_group\nA1[Create placement items]\nA2[Convert the object group to a object matrix]\nA3[Create place holder for the entire group]\nA4[Add each item in the group to the dictionary and map]\nA5[End]\n\nA1==&gt;C1\nA2--&gt;A3==&gt;B1\nA4--&gt;A5\n\nsubgraph place_placement_item\nB1[Try to place item into the placement map]\nB2{Placement success}\nB3[Mark the item in the placement map]\nB4[Resize the placement with a fix h/w ratio]\nend\n\nB1--&gt;B2\nB2--\"Yes\"--&gt;B3==&gt;A4\nB2--\"No\"--&gt;B4--&gt;B1\n\nsubgraph Get suitable shape of objects\nC1{h/w ratio is fix?}\nC2[Take fixed h/w ratio as the shape of the object group]\nC3[Count the width and the height of all objects in one row including marigins]\nC4{if the h/w ratio is larger than the ratio of scene}\nC5[Double the elements in the shape]\nC6[Take this h/w ratio as the shape of the object group]\n\nC1--\"Yes\"--&gt;C2==&gt;A2\nC1--\"No\"--&gt;C3--&gt;C4\nC4--\"Yes\"--&gt;C5--&gt;C3\nC4--\"No\"--&gt;C6==&gt;A2\nend\n\nend</code></pre>"},{"location":"1-references/30-scene/32-placement/#isaplacementitem","title":"IsaPlacementItem","text":"<p>Data structure of one object for auto placement.</p> <p>Attributes:</p> Name Type Description <code>isa_object</code> <code>Mobject</code> <p>Isa object, RegUnit, ElemUnit, FunctionUnit and MemoryUnit.</p> <code>isa_hash</code> <code>Union[int, str]</code> <p>Hash value of this object.</p> <code>row</code> <code>int</code> <p>Vertical ordinate of left-up corner.</p> <code>col</code> <code>int</code> <p>Horizontal ordinate of left-up corner.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementItem.__init__","title":"<code>__init__(isa_object, isa_hash)</code>","text":"<p>Construct one data structure for animate.</p> <p>Parameters:</p> Name Type Description Default <code>isa_object</code> <code>Mobject</code> <p>Isa object.</p> required <code>isa_hash</code> <code>Union[int, str]</code> <p>Hash value of this object.</p> required"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementItem.get_height","title":"<code>get_height()</code>","text":"<p>Return the height of this object for placement. The height is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The height of this object.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementItem.get_marker","title":"<code>get_marker()</code>","text":"<p>Return the marker of this object for placement.</p> <p>Returns:</p> Type Description <code>int</code> <p>Marker of this object.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementItem.get_width","title":"<code>get_width()</code>","text":"<p>Return the width of this object for placement. The width is ceil to an integer.</p> <p>Returns:</p> Type Description <code>int</code> <p>The width of this object.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementItem.set_corner","title":"<code>set_corner(row, col)</code>","text":"<p>Set the position of object by the left-up corner position. Move object to the specified position.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>Vertical ordinate of left-up corner.</p> required <code>col</code> <code>int</code> <p>Horizontal ordinate of left-up corner.</p> required"},{"location":"1-references/30-scene/32-placement/#isaplacementmap","title":"IsaPlacementMap","text":"<p>This class manages the position of objects in scene.</p> <p>Attributes:</p> Name Type Description <code>_placement_object_dict</code> <code>Dict[str, IsaPlacementItem]</code> <p>Dictionary of objects, key is one hash value and the value is item of IsaPlacementItem.</p> <code>_placement_map</code> <code>List[List[int]]</code> <p>Array of the placement.</p> <code>_placement_width</code> <code>int</code> <p>Width of the placement.</p> <code>_placement_height</code> <code>int</code> <p>Height of the placement.</p> <code>_placement_hv_ratio</code> <code>float</code> <p>height/width ratio of the placement.</p> <code>_placement_strategy</code> <code>str</code> <p>Strategy to find rectangle.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.__init__","title":"<code>__init__(strategy='RB')</code>","text":"<p>Initialize placement map.</p> <p>Parameters:</p> Name Type Description Default <code>strategy</code> <code>str</code> <p>Strategy to search rectangle, option: RB or BR.</p> <code>'RB'</code>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.dump_placement","title":"<code>dump_placement()</code>","text":"<p>Return a string of placement map for debug.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string of placement map.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.get_camera_scale","title":"<code>get_camera_scale(camera_width, camera_height)</code>","text":"<p>Return scale factor of the placement to fit into specified camera.</p> <p>Parameters:</p> Name Type Description Default <code>camera_width</code> <code>float</code> <p>The width of camera.</p> required <code>camera_height</code> <code>float</code> <p>The height of camera.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Scale factor of the camera.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.get_object","title":"<code>get_object(place_hash)</code>","text":"<p>Return ISA object of the specified hash.</p> <p>Parameters:</p> Name Type Description Default <code>place_hash</code> <code>str</code> <p>Hash value of ISA object.</p> required <p>Returns:</p> Type Description <code>Mobject</code> <p>The object for the specified ISA.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.get_placement_height","title":"<code>get_placement_height()</code>","text":"<p>Return the height of the placement, only occupied rows or margins are count.</p> <p>Returns:</p> Type Description <code>int</code> <p>Return the width of the placement map.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.get_placement_origin","title":"<code>get_placement_origin()</code>","text":"<p>Return center position of the placement map related to the left-up corner.</p> <p>Returns:</p> Type Description <code>array</code> <p>Return the center position of the placement map.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.get_placement_width","title":"<code>get_placement_width()</code>","text":"<p>Return the width of the placement, only occupied column or margins are count.</p> <p>Returns:</p> Type Description <code>int</code> <p>Return the width of the placement map.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.has_object","title":"<code>has_object(place_hash)</code>","text":"<p>Check whether the object is existed.</p> <p>Parameters:</p> Name Type Description Default <code>place_hash</code> <code>str</code> <p>Hash value of ISA object.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True means the hash exists in the placement dictionary.</p>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.place_object","title":"<code>place_object(place_object, place_hash, align_with=None)</code>","text":"<p>Add object into the dictionary and place it into the placement map.</p> <p>Parameters:</p> Name Type Description Default <code>place_object</code> <code>Mobject</code> <p>Object to place.</p> required <code>place_hash</code> <code>Union[int, str]</code> <p>Hash value of ISA object.</p> required <code>align_with</code> <code>Mobject</code> <p>The object will be placed at the same row with another object.</p> <code>None</code>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.place_object_group","title":"<code>place_object_group(place_object_list, place_hash_list, force_hw_ratio=None)</code>","text":"<p>Add a group of object into the dictionary and place it into the placement map.</p> <p>Parameters:</p> Name Type Description Default <code>place_object_list</code> <code>List[Mobject]</code> <p>List of object to place.</p> required <code>place_hash_list</code> <code>List[Union[int, str]]</code> <p>Hash value of ISA object.</p> required <code>force_hw_ratio</code> <code>Union[int, None]</code> <p>Force the horization/vertical ratio of the groups.</p> <code>None</code>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.place_placement_item","title":"<code>place_placement_item(placement_item, force=False, align_row=None)</code>","text":"<p>Place one item into the placement map.</p> <p>This function tries to allocate the item into the placement map. If placement fails, this function will resize the placement map and try again. This function continues iteration until the object can be allocated into the placement map.</p> <p>Parameters:</p> Name Type Description Default <code>placement_item</code> <code>IsaPlacementItem</code> <p>Object item to place in the map.</p> required <code>force</code> <code>bool</code> <p>True means the object item must place at the position specified in <code>placement_item</code>.</p> <code>False</code> <code>align_row</code> <code>int</code> <p>The object item must be specified at the specified row.</p> <code>None</code>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.reset_placement","title":"<code>reset_placement(keep_objects=None, keep_pos=True)</code>","text":"<p>Reset placement map.</p> <p>Parameters:</p> Name Type Description Default <code>keep_objects</code> <code>List[Mobject]</code> <p>Objects should keep in the scene.</p> <code>None</code> <code>keep_pos</code> <code>bool</code> <p>True means keep the position of keep objects in the new placement.</p> <code>True</code>"},{"location":"1-references/30-scene/32-placement/#isa_manim.isa_scene.isa_placement.IsaPlacementMap.resize_placement","title":"<code>resize_placement(new_width, new_height)</code>","text":"<p>Resize placement map while keeping items in the old placement map.</p> <p>Parameters:</p> Name Type Description Default <code>new_width</code> <code>int</code> <p>New width of the placement map.</p> required <code>new_height</code> <code>int</code> <p>New height of the placement map.</p> required"},{"location":"1-references/30-scene/33-animation-flow/","title":"Animation Flow","text":"<p>Several data structures are implemented for the animation flow algorithm:</p> <ul> <li><code>isa_manim.isa_scene.isa_animate.IsaAnimateItem</code> provides the data structure of one single animation, including <code>IsaAnimateItem</code> of dependency objects.</li> <li><code>isa_manim.isa_scene.isa_animate._IsaAnimateSection</code> provides the data structure of one animation section.</li> <li><code>isa_manim.isa_scene.isa_animate._IsaAnimateStep</code> provides the data structure of one animation step.</li> </ul> <p><code>isa_manim.isa_scene.isa_animate.IsaAnimationFlow</code> provides the animation flow algorithm. When registering one animation, <code>add_animation</code> is called to generate the <code>IsaAnimationItem</code> and recognize the dependency with registered animations. At the end of one section, <code>switch_section</code> is called to generate the <code>_IsaAnimateSection</code>.</p> <p>When sequentially calling <code>switch_section</code> more than once, the final efforts look like the intersection of two <code>switch_section</code>.</p> <p>When rendering the animation, <code>analysis_animation_flow</code> is called to analyze the animation flow and generate <code>_IsaAnimateStep</code>. As the result of the animation flow algorithm, Animation steps are stored in <code>animation_step_list</code>.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isaanimateitem","title":"IsaAnimateItem","text":"<p>Data structure for animate for dependency analysis.</p> <p>It contains the list of source items and destination items of one item, which can conclude the dependency of animations.</p> <p>It also has a list of dependency items, which must be maintained in scene during this animation.</p> <p>Attributes:</p> Name Type Description <code>animate</code> <code>Animation</code> <p>Animate</p> <code>src_item_list</code> <code>List[Mobject]</code> <p>List of source items.</p> <code>dst_item_list</code> <code>List[Mobject]</code> <p>List of destination items.</p> <code>dep_item_list</code> <code>List[Mobject]</code> <p>List of dependency items.</p> <code>predecessor_list</code> <code>List[Self]</code> <p>List of predecessor animates.</p> <code>successor_list</code> <code>List[Self]</code> <p>List of successor animates.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isa_manim.isa_scene.isa_animate.IsaAnimateItem.__init__","title":"<code>__init__(animate, src, dst, dep=None, add_before=None, add_after=None, rm_before=None, rm_after=None)</code>","text":"<p>Construct one data structure for animate.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>Animation</code> <p>One animation.</p> required <code>src</code> <code>List[Mobject]</code> <p>Source Objects.</p> required <code>dst</code> <code>List[Mobject]</code> <p>Destination Objects.</p> required <code>dep</code> <code>List[Mobject]</code> <p>Dependency Objects.</p> <code>None</code> <code>add_before</code> <code>List[Mobject]</code> <p>Objects to add before this animation.</p> <code>None</code> <code>add_after</code> <code>List[Mobject]</code> <p>Objects to add after this animation.</p> <code>None</code> <code>rm_before</code> <code>List[Mobject]</code> <p>Objects to remove before this animation.</p> <code>None</code> <code>rm_after</code> <code>List[Mobject]</code> <p>Objects to remove after this animation.</p> <code>None</code>"},{"location":"1-references/30-scene/33-animation-flow/#isa_manim.isa_scene.isa_animate.IsaAnimateItem.has_background","title":"<code>has_background(dep)</code>","text":"<p>Check whether dep is background of this item. Background item should not change during this animation.</p> <p>Parameters:</p> Name Type Description Default <code>dep</code> <code>Mobject</code> <p>Another manim object.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Return true if <code>dep</code> is a dependency item of this animation.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isa_manim.isa_scene.isa_animate.IsaAnimateItem.is_beginner","title":"<code>is_beginner()</code>","text":"<p>Check whether this item is a beginner of a dependency chain.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Return True if animate does not have source item.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isa_manim.isa_scene.isa_animate.IsaAnimateItem.is_predecessor_of","title":"<code>is_predecessor_of(post)</code>","text":"<p>Check whether this item is predecessor of <code>post</code>. Successor <code>post</code> should play after this animation.</p> <p>Parameters:</p> Name Type Description Default <code>post</code> <code>Self</code> <p>Another animation item.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Return True if one of the destination item of this animation is also a source item of the <code>post</code> item.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isa_manim.isa_scene.isa_animate.IsaAnimateItem.is_successor_of","title":"<code>is_successor_of(pre)</code>","text":"<p>Check whether this item is successor of <code>pre</code>. Predecessor <code>pre</code> should play before this animation.</p> <p>Parameters:</p> Name Type Description Default <code>pre</code> <code>Self</code> <p>Another animation item.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Return True if one of the source item of this animation is also a destination item of the <code>pre</code> item.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isa_manim.isa_scene.isa_animate.IsaAnimateItem.is_terminator","title":"<code>is_terminator()</code>","text":"<p>Check whether this item is a terminator of a dependency chain.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Return True if animate does not have destination item.</p>"},{"location":"1-references/30-scene/33-animation-flow/#_isaanimatesection","title":"_IsaAnimateSection","text":"<p>One section of ISA Animation.</p> <p>Attributes:</p> Name Type Description <code>animate_list</code> <code>List[IsaAnimateItem]</code> <p>List of animation.</p> <code>wait</code> <code>int</code> <p>Wait time after this section. &lt;=0 means no wait.</p> <code>fade_out</code> <code>bool</code> <p>Whether fade out left items after this section.</p> <code>camera_animate</code> <code>Tuple[float, ndarray]</code> <p>Animation of move camera before this section, which is a tuple of one float and a position. The float provides the scaling of camera while position provides the new central position of camera.</p> <code>keep_objects</code> <code>List[Mobject]</code> <p>List of objects that keep on scene between section.</p>"},{"location":"1-references/30-scene/33-animation-flow/#_isaanimatestep","title":"_IsaAnimateStep","text":"<p>One step of ISA Animation, which contains a set of animations that can play simultaneously.</p> <p>Attributes:</p> Name Type Description <code>animate_list</code> <code>List[IsaAnimateItem]</code> <p>List of animation.</p> <code>wait</code> <code>int</code> <p>Wait time after this step. &lt;=0 means no wait.</p> <code>camera_animate</code> <code>Tuple[float, ndarray]</code> <p>Animation of move camera before this section, which is a tuple of one float and a position. The float provides the scaling of camera while position provides the new central position of camera.</p> <code>add_before</code> <code>List[Mobject]</code> <p>Objects to add before this animation.</p> <code>add_after</code> <code>List[Mobject]</code> <p>Objects to add after this animation.</p> <code>rm_before</code> <code>List[Mobject]</code> <p>Objects to remove before this animation.</p> <code>rm_after</code> <code>List[Mobject]</code> <p>Objects to remove after this animation.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isaanimationflow","title":"IsaAnimationFlow","text":"<p>This class is used to analyse the order of animations.</p> <p>Attributes:</p> Name Type Description <code>isa_animation_section_list</code> <p>List of ISA animation section, which contains a set of  animations.</p> <code>isa_animation_step_list</code> <p>List of ISA step section, which contains a set of animations after analysis animation flow.</p> <code>_section_animate_list</code> <p>List of animations after previous section, which will be packed into one section.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isa_manim.isa_scene.isa_animate.IsaAnimationFlow.add_animation","title":"<code>add_animation(animate, src, dst, dep=None, add_before=None, add_after=None, remove_before=None, remove_after=None)</code>","text":"<p>Register animation to scene and build dependency.</p> <p>Parameters:</p> Name Type Description Default <code>animate</code> <code>Animation</code> <p>One Manim animation.</p> required <code>src</code> <code>List[Mobject]</code> <p>List of source objects of this animation.</p> required <code>dst</code> <code>List[Mobject]</code> <p>List of destination objects of this animation.</p> required <code>dep</code> <code>List[Mobject]</code> <p>List of dependency objects of this animation.</p> <code>None</code> <code>add_before</code> <code>List[Mobject]</code> <p>List of objects to add into the scene before this animation.</p> <code>None</code> <code>add_after</code> <code>List[Mobject]</code> <p>List of objects to add into the scene after this animation.</p> <code>None</code> <code>remove_before</code> <code>List[Mobject]</code> <p>List of objects to remove from the scene before this animation.</p> <code>None</code> <code>remove_after</code> <code>List[Mobject]</code> <p>List of objects to remove from the scene after this animation.</p> <code>None</code> <p>Returns:</p> Type Description <code>IsaAnimateItem</code> <p>Return an entity of data structure for animation flow analysis.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isa_manim.isa_scene.isa_animate.IsaAnimationFlow.analysis_animation_flow","title":"<code>analysis_animation_flow()</code>","text":"<p>Analysis the data flow and organize animations into several step.</p>"},{"location":"1-references/30-scene/33-animation-flow/#isa_manim.isa_scene.isa_animate.IsaAnimationFlow.switch_section","title":"<code>switch_section(wait=0, fade_out=True, camera_animate=None, keep_objects=None)</code>","text":"<p>Switch animation section.</p> <p>Save registered animate to an animate section structure and clear animation list for next section.</p> <p>Parameters:</p> Name Type Description Default <code>wait</code> <code>float</code> <p>Seconds to wait before end of this section.</p> <code>0</code> <code>fade_out</code> <code>bool</code> <p>True means clear all items at the end of this section.</p> <code>True</code> <code>camera_animate</code> <code>Tuple[float, ndarray]</code> <p>Animate to scale/move camera.</p> <code>None</code> <code>keep_objects</code> <code>List[Mobject]</code> <p>Objects keep on the scene between sections</p> <code>None</code>"},{"location":"1-references/30-scene/34-refer-count/","title":"Element Reference Counter","text":""},{"location":"1-references/30-scene/34-refer-count/#reuse-elements-from-the-same-index-of-the-same-register","title":"Reuse elements from the same index of the same register","text":"<p>When reading one element from one register, the accessed element is recorded. If the element is accessed again, the recorded element is used, rather than creating a new element.</p> <p>The recorded element is identified by all the following attributes:</p> <ul> <li>The source register.</li> <li>The element index to access the register.</li> <li>The register index to access the register.</li> <li>The bit offset of LSB.</li> <li>The width of the accessed element.</li> </ul> <p>The recorded element is returned, only when all the above attributes match.</p> <p><code>isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.set_elem_source</code> records one element and the source attributes of this element. <code>isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.get_elem_by_source</code> returns the record element by the source attributes. If no matched recorded element, <code>get_elem_by_source</code> returns <code>None</code>.</p>"},{"location":"1-references/30-scene/34-refer-count/#duplicate-elements-with-multiple-consumers","title":"Duplicate elements with multiple consumers","text":"<p>The animation to create one element is referenced as the producer. The animation that references one element as a source is referenced as the consumer. In most situations, one element has only one producer and multiple consumers. </p> <ul> <li><code>isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.set_elem_producer</code> registers one element when the element is generated. The initial value of the reference counter is 0. <code>set_elem_producer</code> is applied where the element unit is created.</li> <li><code>isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.set_elem_cusumer</code> registers the last consumer animation and increases the reference counter by 1. The <code>set_elem_cusumer</code> is applied where the element unit is used as the source.</li> <li>If the reference counter is 0, <code>isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.get_duplicate_item</code> returns the original element. If the reference counter is higher than 1, <code>get_duplicate_item</code> returns a copy of the element unit. Meanwhile, the copy i</li> </ul> <p>For example, one element <code>A</code> from vector <code>Zm</code> operates with all elements in <code>Zn</code> in one vector instruction. The 0-th element of <code>Zn</code> operates with the original element <code>A</code>. Other elements of <code>Zn</code> operate with a copy of <code>A</code>. The copied elements will be added to the scene before the last consumer animation.</p> <pre><code>flowchart TB\n\nA1((Read one element&lt;br/&gt;from the register))\n\nsubgraph Copy element\nA2[Element unit A]\nA31[Element unit A']\nA32[Element unit A'']\nA33[Element unit A''']\nend\n\nA1--&gt;A2\nA2--copy--&gt;A31--copy--&gt;A32--copy--&gt;A33\n\nsubgraph Add element to scene\nA41[Add A']\nA42[Add A'']\nA43[Add A''']\nA44((*))\nend\n\nA2--&gt;A41\nA31--&gt;A42\nA32--&gt;A43\nA33--&gt;A44\n\nsubgraph Operate animation\nA41--&gt;operate0\nA42--&gt;operate1\nA43--&gt;operate2\nA44--&gt;operate3\nend\n\noperate0--&gt;End[More animations]\noperate1--&gt;End\noperate2--&gt;End\noperate3--&gt;End</code></pre>"},{"location":"1-references/30-scene/34-refer-count/#general-flow-within-animation-api","title":"General flow within animation API","text":"<p>The general flow within an animation API is as below:</p> <pre><code>flowchart TB\n\nA1[Call &lt;code&gt;get_duplicate_item&lt;/code&gt; for source elements]\nA2[Create destination elements]\nA3[Play animations&lt;br&gt; Animations operate on duplicated element]\nA4[Call &lt;code&gt;set_elem_cusumer&lt;/code&gt; for source elements]\nA5[Call &lt;code&gt;set_elem_producer&lt;/code&gt; for destination elements]\n\nA1--&gt;A2--&gt;A3--&gt;A4--&gt;A5</code></pre>"},{"location":"1-references/30-scene/34-refer-count/#_isaelemsourceitem","title":"_IsaElemSourceItem","text":"<p>Data structure to record the source of one element.</p> <p>Attributes:</p> Name Type Description <code>register</code> <code>RegUnit</code> <p>Register where the element comes from.</p> <code>index</code> <code>int</code> <p>Element index to access the register.</p> <code>reg_idx</code> <code>int</code> <p>Register index to access the register.</p> <code>offset</code> <code>int</code> <p>Offset of LSB.</p>"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount._IsaElemSourceItem.__init__","title":"<code>__init__(register, index, reg_idx, offset)</code>","text":"<p>Construct the data structure.</p> <p>Parameters:</p> Name Type Description Default <code>register</code> <code>RegUnit</code> <p>Register where the element comes from.</p> required <code>index</code> <code>int</code> <p>Element index to access the register.</p> required <code>reg_idx</code> <code>int</code> <p>Register index to access the register.</p> required <code>offset</code> <code>int</code> <p>Offset of LSB.</p> required"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount._IsaElemSourceItem.is_match","title":"<code>is_match(register, index, reg_idx, offset)</code>","text":"<p>Check whether the specified arguments match this data structure.</p> <p>Parameters:</p> Name Type Description Default <code>register</code> <code>RegUnit</code> <p>Register where the element comes from.</p> required <code>index</code> <code>int</code> <p>Element index to access the register.</p> required <code>reg_idx</code> <code>int</code> <p>Register index to access the register.</p> required <code>offset</code> <code>int</code> <p>Offset of LSB.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>If arguments match, return True.</p>"},{"location":"1-references/30-scene/34-refer-count/#_isaelemrefcountitem","title":"_IsaElemRefCountItem","text":"<p>Data structure of reference counter.</p> <p>Attributes:</p> Name Type Description <code>refer_count</code> <code>int</code> <p>Reference counter. 0 means there is no reference of this unit.</p> <code>last_consumer</code> <code>IsaAnimateItem</code> <p>Animation to consumer this element unit.</p> <code>last_dep</code> <code>Mobject</code> <p>Dependency unit of last animation.</p>"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount._IsaElemRefCountItem.__init__","title":"<code>__init__()</code>","text":"<p>Constructor data structure of reference counter.</p> <p>Reset member variables.</p>"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount._IsaElemRefCountItem.get_dup_elem","title":"<code>get_dup_elem(elem)</code>","text":"<p>Get a copy of element if the element has been referenced.</p> <p>If the element has not been referenced, return the element unit itself. Otherwise, return a copy of the element.</p> <p>Add duplicated element after the last consumer animation.</p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Element unit.</p> required <p>Returns:</p> Type Description <code>ElemUnit</code> <p>Return a copy of the specified element unit.</p>"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount._IsaElemRefCountItem.set_cusumer","title":"<code>set_cusumer(consumer, dep)</code>","text":"<p>Set the consumer of element. Increase the reference counter.</p> <p>Parameters:</p> Name Type Description Default <code>consumer</code> <code>IsaAnimateItem</code> <p>The animation consumes this animation.</p> required <code>dep</code> <code>Mobject</code> <p>Dependency unit.</p> required"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount._IsaElemRefCountItem.set_producer","title":"<code>set_producer(dep)</code>","text":"<p>Set the producer of element.</p> <p>Parameters:</p> Name Type Description Default <code>dep</code> <code>Mobject</code> <p>Dependency unit.</p> required"},{"location":"1-references/30-scene/34-refer-count/#isaelemrefcount","title":"IsaElemRefCount","text":"<p>Data structure for element reference counter.</p>"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.__init__","title":"<code>__init__()</code>","text":"<p>Construct data structure for element reference counter.</p> <p>Attributes:</p> Name Type Description <code>elem_source_dict</code> <p>Dictionary of element source. Key is element unit, and value is the source register and the index to access the register.</p> <code>elem_refcount_dict</code> <p>Dictionary of reference counter. Key is element unit, and value contains the reference counter and the last consumer and dependency.</p>"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.get_duplicate_item","title":"<code>get_duplicate_item(elem)</code>","text":"<p>Get a copy of element if the element has been referenced.</p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Element unit.</p> required <p>Returns:</p> Type Description <code>ElemUnit</code> <p>Return a copy of the specified element unit.</p>"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.get_elem_by_source","title":"<code>get_elem_by_source(register, width, reg_idx, index, offset)</code>","text":"<p>Get one element unit by source.</p> <p>Parameters:</p> Name Type Description Default <code>register</code> <code>RegUnit</code> <p>The source register.</p> required <code>width</code> <code>int</code> <p>Width of element.</p> required <code>reg_idx</code> <code>int</code> <p>Register index to access the register.</p> required <code>index</code> <code>int</code> <p>Element index to access the reigster.</p> required <code>offset</code> <code>int</code> <p>LSB offset.</p> required <p>Returns:</p> Type Description <code>ElemUnit</code> <p>Return the element unit specified by the source register and index. Otherwise, return None.</p>"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.get_last_deps","title":"<code>get_last_deps(*elem_list)</code>","text":"<p>Return the depedency units (Registers, Memory and Functions) of specified list.</p> <ul> <li>If <code>elem_list</code> contains only one element unit, return a single unit.<ul> <li>Return None if no dependency unit is found.</li> </ul> </li> <li>Otherwise, return a list of units.<ul> <li>Return an empty list if no dependency unit is found.</li> </ul> </li> </ul> <p>Returns:</p> Type Description <code>Union[List[Mobject], Mobject, None]</code> <p>Return a list of dependency units or a single dependency unit.</p>"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.set_elem_cusumer","title":"<code>set_elem_cusumer(elem, consumer, dep)</code>","text":"<p>Set the consumer of one element unit. Called when one animation consumes the element unit.</p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Element unit.</p> required <code>consumer</code> <code>IsaAnimateItem</code> <p>Last consumer animation of this element unit.</p> required <code>dep</code> <code>Mobject</code> <p>Last dependency unit, RegUnit, FunctionUnit or MemoryUnit.</p> required"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.set_elem_producer","title":"<code>set_elem_producer(elem, dep)</code>","text":"<p>Set the producer of one element unit. Called when one animation produces the element unit.</p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Element unit.</p> required <code>dep</code> <code>Mobject</code> <p>Last dependency unit, RegUnit, FunctionUnit or MemoryUnit.</p> required"},{"location":"1-references/30-scene/34-refer-count/#isa_manim.isa_scene.isa_elem_refcount.IsaElemRefCount.set_elem_source","title":"<code>set_elem_source(elem, register, reg_idx, index, offset)</code>","text":"<p>Set the source of one element unit.</p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Element unit.</p> required <code>register</code> <code>RegUnit</code> <p>The source register.</p> required <code>reg_idx</code> <code>int</code> <p>Register index to access the register.</p> required <code>index</code> <code>int</code> <p>Element index to access the reigster.</p> required <code>offset</code> <code>int</code> <p>LSB offset.</p> required"},{"location":"1-references/30-scene/35-data_flow/","title":"Data flow","text":""},{"location":"1-references/30-scene/35-data_flow/#isa_data_flow","title":"isa_data_flow","text":"<p>             Bases: <code>IsaAnimationFlow</code>, <code>IsaElemRefCount</code>, <code>IsaPlacementMap</code>, <code>IsaColorMap</code></p> <p>Data flow of ISA, used to define API for ISA animation.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.__init__","title":"<code>__init__(strategy='RB', default_color=WHITE, color_scheme=None)</code>","text":"<p>Construct animation and placement manager.</p> <p>Parameters:</p> Name Type Description Default <code>strategy</code> <code>str</code> <p>Placement strategy, options: RB or BR.</p> <code>'RB'</code> <code>default_color</code> <code>Color</code> <p>Default color of item, used for register and functions.</p> <code>WHITE</code>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.data_extend","title":"<code>data_extend(elem, width, zero_extend=False, value=None)</code>","text":"<p>Signaled extend or zero-extend element <code>elem</code> to bitwidth `width. Return the new element after extension.</p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Origin element unit.</p> required <code>width</code> <code>float</code> <p>Target width for extend.</p> required <code>zero_extend</code> <code>bool</code> <p>True means zero extension. The extend part will be assign with zero.</p> <code>False</code> <code>value</code> <code>Any</code> <p>New value of the element unit. If not specified, inherent value from the origin element.</p> <code>None</code> <p>Returns:</p> Type Description <code>ElemUnit</code> <p>Element unit after extension.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.decl_func_group","title":"<code>decl_func_group(num_unit, isa_hash, args_width, res_width, func_name=None, args_name=None, res_name=None, font_size=DEFAULT_FONT_SIZE, value_format=None, force_hw_ratio=False, func_callee=None)</code>","text":"<p>Declare a group of function units with a sequential of specified hash (<code>isa_hash</code>), arguments (<code>arg_width</code>), and return values (<code>res_width</code>) and add them to the scene as a group.</p> <p>Parameters:</p> Name Type Description Default <code>num_unit</code> <code>Union[int, List[int]]</code> <p>The number of units. More than one hierachy level is accepted.</p> required <code>isa_hash</code> <code>Union[str, List[str]]</code> <p>Hash value of this function unit, used by <code>function_call</code>. Both a single hash and a sequence of hash are accepted.</p> required <code>args_width</code> <code>List[float]</code> <p>A list of bit-width of arguments.</p> required <code>res_width</code> <code>Union[int, List[int]]</code> <p>Bit-width of return values. If there is only one return value, one single interger is required.</p> required <code>func_name</code> <code>Union[str, List[str]]</code> <p>Function name. If not specified, take <code>isa_hash</code> as function name.</p> <code>None</code> <code>args_name</code> <code>List[str]</code> <p>A list of name of arguments. The number of elements should be same as <code>args_width</code>.</p> <code>None</code> <code>res_name</code> <code>Union[str, List[str]]</code> <p>Name of return value. The number of elements should be same as <code>res_name</code>.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of register name. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <code>force_hw_ratio</code> <code>bool</code> <p>If <code>force_hw_ratio</code> is true, the number of units in one row is forced by the last item in <code>num_unit</code>. If <code>force_hw_ratio</code> is false, the shape of function groups is auto-adjusted according to the scene h/w ratio.</p> <code>False</code> <code>func_callee</code> <code>Callable</code> <p>Pointer to a function to perform the functionality.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[FunctionUnit]</code> <p>A list of generated function unit.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.decl_function","title":"<code>decl_function(isa_hash, args_width, res_width, name=None, args_name=None, res_name=None, font_size=DEFAULT_FONT_SIZE, value_format=None, align_with=None, func_callee=None)</code>","text":"<p>Declare one function unit with a specified hash (<code>isa_hash</code>), arguments (<code>arg_width</code>), and return values (<code>res_width</code>) and add it to the scene.</p> <p>Parameters:</p> Name Type Description Default <code>isa_hash</code> <code>str</code> <p>Hash value of this function unit, used by <code>function_call</code>.</p> required <code>args_width</code> <code>List[float]</code> <p>A list of bit-width of arguments.</p> required <code>res_width</code> <code>Union[int, List[int]]</code> <p>Bit-width of return values. If there is only one return value, one single interger is required.</p> required <code>name</code> <code>str</code> <p>Function name. If not specified, take <code>isa_hash</code> as function name.</p> <code>None</code> <code>args_name</code> <code>List[str]</code> <p>A list of name of arguments. The number of elements should be same as <code>args_width</code>.</p> <code>None</code> <code>res_name</code> <code>Union[str, List[str]]</code> <p>Name of return value. The number of elements should be same as <code>res_name</code>.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of register name. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <code>align_with</code> <code>Union[RegUnit, FunctionUnit, MemoryUnit]</code> <p>Align with specified element when placement. If not specified, placement follows automatic strategy.</p> <code>None</code> <code>func_callee</code> <code>Callable</code> <p>Pointer to a function to perform the functionality. </p> <code>None</code> <p>Returns:</p> Type Description <code>FunctionUnit</code> <p>Generated function unit.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.decl_memory","title":"<code>decl_memory(addr_width, data_width, mem_range, isa_hash=None, addr_align=None, status_width=0, font_size=DEFAULT_FONT_SIZE, value_format=None, para_enable=False)</code>","text":"<p>Declare one memory unit with a specified address width (<code>addr_width</code>), data width (<code>data_width</code>), and memory range (<code>mem_range</code>) and add it to the scene.</p> <p>Parameters:</p> Name Type Description Default <code>addr_width</code> <code>int</code> <p>Bit-width of the address port.</p> required <code>data_width</code> <code>int</code> <p>Bit-width of the data port.</p> required <code>mem_range</code> <code>List[Tuple[int, int]]</code> <p>Range of memory map. Each tuple in <code>mem_range</code> presents the range of one memory map. The first element in tuple is the lowest address and the second element is the highest address.</p> required <code>isa_hash</code> <code>str</code> <p>Hash value of this memory unit. Used to declare more than one memory unit.</p> <code>None</code> <code>addr_align</code> <code>int</code> <p>Align requirement of memory range. If not specified, take the value from global configuration <code>mem_align</code>.</p> <code>None</code> <code>status_width</code> <code>int</code> <p>Bit width of the status port. If not specified, the memory unit does not have status port.</p> <code>0</code> <code>font_size</code> <code>int</code> <p>Font size of register name. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <code>para_enable</code> <code>bool</code> <p>True means memory unit allow parallel animations. False means animations with this memory unit must be serialized.</p> <code>False</code> <p>Returns:</p> Type Description <code>MemoryUnit</code> <p>Generated memory unit.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.decl_register","title":"<code>decl_register(text, width, elements=1, nreg=1, value=None, font_size=DEFAULT_FONT_SIZE, value_format=None, align_with=None)</code>","text":"<p>Declare one register with a specified name (<code>text</code>) and bit width (<code>width</code>) and add it to the scene.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Name of this register.</p> required <code>width</code> <code>int</code> <p>Width of this register width, in bit.</p> required <code>elements</code> <code>int</code> <p>Elements count in this register, or horizontal size of this register.</p> <code>1</code> <code>nreg</code> <code>int</code> <p>Number of registers, or vertical size of this register.</p> <code>1</code> <code>value</code> <code>List[List[Any]]</code> <p>Value of this register, single element or 1-D/2-D array. If not specified, assign None.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of register name. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <code>align_with</code> <code>Union[RegUnit, FunctionUnit, MemoryUnit]</code> <p>Align with specified element when placement. If not specified, placement follows automatic strategy.</p> <code>None</code> <p>Returns:</p> Type Description <code>RegUnit</code> <p>Generated register unit.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.function_call","title":"<code>function_call(isa_hash, args, args_offset=None, color_hash=None, res_width=None, res_offset=None, res_value=None, res_fill_opacity=None, res_font_size=DEFAULT_FONT_SIZE, res_value_format=None)</code>","text":"<p>Function call.</p> <p>Parameters:</p> Name Type Description Default <code>isa_hash</code> <code>str</code> <p>Hash value of the specified function unit.</p> required <code>args</code> <code>List[ElemUnit]</code> <p>Element units as arguments.</p> required <code>args_offset</code> <code>List[int]</code> <p>LSB offset for the argument elements. If not specified, 0 for each argument elements.</p> <code>None</code> <code>color_hash</code> <code>Union[int, str]</code> <p>Specified hash to get color from scheme.</p> <code>None</code> <code>res_width</code> <code>Union[int, List[int]]</code> <p>Bit-width of return values. If there is only one return value, one single interger is required.</p> <code>None</code> <code>res_offset</code> <code>Union[int, List[int]]</code> <p>LSB offset for the result element units. If not specified, 0 for each result element units.</p> <code>None</code> <code>res_value</code> <code>Union[Any, List[Any]]</code> <p>Value of the result element units. If not specified, assign None or calculate by inline function.</p> <code>None</code> <code>res_fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>res_font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>res_value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ElemUnit, List[ElemUnit]]</code> <p>Result element units. If only one result value, only one element unit returns.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.move_elem","title":"<code>move_elem(elem, vector, index=0, reg_idx=0, offset=0, width=0)</code>","text":"<p>Aassign one element <code>elem</code> to the specified position (<code>reg_idx</code> and <code>index</code>) of the specified register <code>vector</code>. </p> <p>Parameters:</p> Name Type Description Default <code>elem</code> <code>ElemUnit</code> <p>Element object.</p> required <code>vector</code> <code>RegUnit</code> <p>Register unit.</p> required <code>index</code> <code>int</code> <p>Element index.</p> <code>0</code> <code>reg_idx</code> <code>int</code> <p>Regsiter index.</p> <code>0</code> <code>offset</code> <code>int</code> <p>Offset of LSB.</p> <code>0</code> <code>width</code> <code>int</code> <p>Width of element in bit.</p> <code>0</code> <p>Returns:</p> Type Description <code>ElemUnit</code> <p>Element unit after move.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.read_elem","title":"<code>read_elem(vector, index=0, reg_idx=0, offset=0, width=0, color_hash=None, value=None, fill_opacity=None, font_size=DEFAULT_FONT_SIZE, value_format=None)</code>","text":"<p>Read one element from the specified position (<code>reg_idx</code> and <code>index</code>) of the specified register <code>vector</code> and return one element unit.</p> <p>Parameters:</p> Name Type Description Default <code>vector</code> <code>RegUnit</code> <p>Register.</p> required <code>index</code> <code>int</code> <p>Element index.</p> <code>0</code> <code>reg_idx</code> <code>int</code> <p>Regsiter index.</p> <code>0</code> <code>offset</code> <code>int</code> <p>Offset of LSB.</p> <code>0</code> <code>width</code> <code>int</code> <p>Width of element in bit.</p> <code>0</code> <code>color_hash</code> <code>Union[int, str]</code> <p>Hash to get color from color scheme.</p> <code>None</code> <code>value</code> <code>Any</code> <p>Value of this register, single element or 1-D/2-D array. If not specified, assign None.</p> <code>None</code> <code>fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of element value. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print data value. If not specified, take the value from global configuration <code>elem_value_format</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>ElemUnit</code> <p>Generated element unit.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.read_func_imm","title":"<code>read_func_imm(width, color_hash=None, value=None, fill_opacity=None, font_size=DEFAULT_FONT_SIZE, value_format=None)</code>","text":"<p>Generate immediate operand for function calling.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>float</code> <p>Bit width.</p> required <code>color_hash</code> <code>Union[int, str]</code> <p>Specified hash to get color from scheme.</p> <code>None</code> <code>value</code> <code>Any</code> <p>Value of the immediate element units. If not specified, assign None or calculate by inline function.</p> <code>None</code> <code>fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>. </p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[ElemUnit, Animation]</code> <p>A tuple of element unit and fade-in animation.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.read_memory","title":"<code>read_memory(addr, width, offset=0, color_hash=None, res_value=None, res_fill_opacity=None, res_font_size=DEFAULT_FONT_SIZE, res_value_format=None, has_status_output=True, status_width=None, status_value=None, status_fill_opacity=None, status_font_size=DEFAULT_FONT_SIZE, status_value_format=None, mem_isa_hash=None)</code>","text":"<p>Read data from the specified address.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>ElemUnit</code> <p>Address element unit.</p> required <code>width</code> <code>int</code> <p>Bit width of read data.</p> required <code>offset</code> <code>int</code> <p>LSB offset of read data.</p> <code>0</code> <code>color_hash</code> <code>Union[int, str]</code> <p>Hash value to get color from color scheme.</p> <code>None</code> <code>res_value</code> <code>Any</code> <p>Value of data element.</p> <code>None</code> <code>res_fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>res_font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>res_value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>. </p> <code>None</code> <code>has_status_output</code> <code>bool</code> <p>True means output of the status port is required. If the memory unit does not have a status port, <code>has_status_output</code> is ignored.</p> <code>True</code> <code>status_width</code> <code>int</code> <p>Bit width of output status. If not specified, the width of the generated status element unit is as same as the status port.</p> <code>None</code> <code>status_value</code> <code>Any</code> <p>Value of status element.</p> <code>None</code> <code>status_fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>status_font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>status_value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>. </p> <code>None</code> <code>mem_isa_hash</code> <code>str</code> <p>Hash to idenify memory unit. If not specified, operate on the memory unit with the hash of \"Memory\".</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Tuple[ElemUnit, ElemUnit], ElemUnit]</code> <p>If having status output, return a tuple of the data and status element units. Otherwise, return the data element unit.</p>"},{"location":"1-references/30-scene/35-data_flow/#isa_manim.isa_scene.isa_data_flow.IsaDataFlow.write_memory","title":"<code>write_memory(addr, data, offset=0, color_hash=None, has_status_output=True, status_width=None, status_value=None, status_fill_opacity=None, status_font_size=DEFAULT_FONT_SIZE, status_value_format=None, mem_isa_hash=None)</code>","text":"<p>Write data to the specified address.</p> <p>Parameters:</p> Name Type Description Default <code>addr</code> <code>ElemUnit</code> <p>Address element unit.</p> required <code>data</code> <code>ElemUnit</code> <p>Data element unit.</p> required <code>offset</code> <code>int</code> <p>LSB offset of read data.</p> <code>0</code> <code>color_hash</code> <code>Union[int, str]</code> <p>Hash value to get color from color scheme.</p> <code>None</code> <code>has_status_output</code> <code>bool</code> <p>True means output of the status port is required. If the memory unit does not have a status port, <code>has_status_output</code> is ignored.</p> <code>True</code> <code>status_width</code> <code>int</code> <p>Bit width of output status. If not specified, the width of the generated status element unit is as same as the status port.</p> <code>None</code> <code>status_value</code> <code>Any</code> <p>Value of status element.</p> <code>None</code> <code>status_fill_opacity</code> <code>float</code> <p>Fill opacity. If not specified, take the value from global configuration <code>elem_fill_opacity</code>.</p> <code>None</code> <code>status_font_size</code> <code>int</code> <p>Font size of result element unit. If not specified, take the value of <code>DEFAULT_FONT_SIZE</code>.</p> <code>DEFAULT_FONT_SIZE</code> <code>status_value_format</code> <code>str</code> <p>Format to print result value. If not specified, take the value from global configuration <code>elem_value_format</code>. </p> <code>None</code> <code>mem_isa_hash</code> <code>str</code> <p>Hash to idenify memory unit. If not specified, operate on the memory unit with the hash of \"Memory\".</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ElemUnit, None]</code> <p>If having status output, return status element unit. Otherwise, return None.</p>"}]}